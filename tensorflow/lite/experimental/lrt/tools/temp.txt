// std::pair<UniqueLrtModel, PluginManager> GetModelAndPlugin() {
//   std::vector<PluginManager> plugins;
//   LRT_CHECK_STATUS_OK(PluginManager::LoadPlugins({kPluginSearchPath},
//   plugins)); ABSL_CHECK_EQ(plugins.size(), 1); return
//   {LoadTestFileModel(kModel), std::move(plugins.front())};
// }

// TEST(PluginToolTest, SerializeRoundTrip) {
//   auto test_data = GetModelAndPlugin();
//   {
//     ASSERT_EQ(test_data.first->subgraphs.size(), 1);
//     const LrtSubgraphT& subgraph = test_data.first->subgraphs.front();
//     EXPECT_EQ(subgraph.inputs.size(), 2);
//     EXPECT_EQ(subgraph.outputs.size(), 1);
//     ASSERT_EQ(subgraph.ops.size(), 1);
//     EXPECT_EQ(subgraph.ops.front()->op_code, kLrtOpCodeTflMul);
//   }

//   PluginTool tool(std::move(test_data.first), std::move(test_data.second));

//   std::stringstream serialized;
//   ASSERT_STATUS_OK(tool.Serialize(serialized));

//   LrtModel model;
//   ASSERT_STATUS_OK(
//       LoadModel(reinterpret_cast<const uint8_t*>(serialized.str().data()),
//                 serialized.str().size(), &model));
//   UniqueLrtModel umodel(model);

//   {
//     ASSERT_EQ(model->subgraphs.size(), 1);
//     const LrtSubgraphT& subgraph = model->subgraphs.front();
//     EXPECT_EQ(subgraph.inputs.size(), 2);
//     EXPECT_EQ(subgraph.outputs.size(), 1);
//     ASSERT_EQ(subgraph.ops.size(), 1);
//     EXPECT_EQ(subgraph.ops.front()->op_code, kLrtOpCodeTflMul);
//   }
// }

// TEST(PluginToolTest, DumpCompilationStats) {
//   auto test_data = GetModelAndPlugin();
//   PluginTool tool(std::move(test_data.first), std::move(test_data.second));

//   std::ostringstream dump_out;
//   tool.DumpCompilationStats(dump_out);
//   EXPECT_EQ(dump_out.view(), "LrtCompiledResult :
//   <no_compilation_result>\n");
// }

// TEST(PluginToolTest, TestPartition) {
//   auto test_data = GetModelAndPlugin();
//   PluginTool tool(std::move(test_data.first), std::move(test_data.second));
//   ASSERT_STATUS_OK(tool.Partiion());
//   ASSERT_EQ(tool.Model().subgraphs.size(), 2);
//   ASSERT_EQ(tool.MainSubgraph().ops.size(), 1);
//   ASSERT_EQ(tool.Partitions().size(), 1);
//   ASSERT_EQ(tool.Partitions().at(0).ops.size(), 1);
// }

// TEST(PluginToolTest, TestDumpPartitionDetails) {
//   auto test_data = GetModelAndPlugin();
//   PluginTool tool(std::move(test_data.first), std::move(test_data.second));
//   ASSERT_STATUS_OK(tool.Partiion());
//   std::ostringstream dump_out;
//   tool.DumpPartitionDetails(dump_out);
//   EXPECT_TRUE(
//       absl::StrContains(dump_out.view(),
//                         "(main subgraph) LrtSubgraph : [ #ops=1 #tensors=3 ]
//                         "
//                         "(<2x2xf32>, <2x2xf32>) -> <2x2xf32>"));
//   EXPECT_TRUE(absl::StrContains(dump_out.view(),
//                                 "(partition) LrtSubgraph : [ #ops=1
//                                 #tensors=3 "
//                                 "] (<2x2xf32>, <2x2xf32>) -> <2x2xf32>"));
// }

// // Utility for applying various functions from given compiler
// // plugin to the given model. Writes details about the process to "dump".
// class PluginTool {
//  public:
//   // Perform the partition step. Plugin selects ops which are sliced from
//   // the original graph.
//   LrtStatus Partiion();

//   // Perform the compilation step for "soc_model" provided. Writes
//   // a new flatbuffer with embedded compiled module and custom ops to
//   // the given stream.
//   // NOTE: Currently this invalidates the underlying input model so it
//   // cannot be called more than once.
//   // TODO: Implement model copy to support compiling for multiple soc_models
//   // in one run.
//   LrtStatus Compile(const absl::string_view soc_model);

//   PluginTool(UniqueLrtModel model, internal::PluginManager plugin,
//              std::ostream& dump = std::cerr)
//       : model_(std::move(model)), plugin_(std::move(plugin)), dump_(dump) {}

//   PluginTool(const PluginTool&) = delete;
//   PluginTool& operator=(const PluginTool&) = delete;
//   PluginTool(PluginTool&&) = delete;
//   PluginTool& operator=(PluginTool&&) = delete;

//  private:
//   const LrtModelT& Model() const { return *model_; }
//   LrtModelT& Model() { return *model_; }

//   const LrtSubgraphT& MainSubgraph() const { return
//   Model().subgraphs.front(); } LrtSubgraphT& MainSubgraph() { return
//   Model().subgraphs.front(); }

//   const absl::Span<const LrtSubgraphT> Partitions() const;

//   std::ostream& Dump() { return dump_; }
//   std::ostream& dump_;

//   void DumpPartitionDetails() const;
//   void DumpCompilationStats(const absl::string_view soc_model) const;

//   std::vector<LrtOp>& CustomOps() { return custom_ops_; }
//   std::vector<LrtOp> custom_ops_;

//   UniqueLrtModel model_;

//   internal::PluginManager plugin_;
// };

// void PluginTool::DumpCompilationStats(const absl::string_view soc_model)
// const {
//   static constexpr absl::string_view kCompiledResultTpl =
//       "LrtCompiledResult : [ module_size=%lu (bytes),
//       #compiled_partitions=%lu "
//       "]\n";
//   static constexpr absl::string_view kCompiledResultErr =
//       "LrtCompiledResult : <no_compilation_result>\n";
//   if (plugin_.CompiledResultHandle(soc_model) == nullptr) {
//     Dump() << kCompiledResultErr;
//     return;
//   }
//   const void* byte_code;
//   size_t byte_code_size;
//   if (kLrtStatusOk !=
//       plugin_.Api().compiled_result_get_byte_code(
//           plugin_.CompiledResultHandle(), &byte_code, &byte_code_size)) {
//     Dump() << kCompiledResultErr;
//     return;
//   }

//   size_t num_compiled_partitions;
//   if (kLrtStatusOk !=
//       plugin_.Api().compiled_result_get_num_calls(
//           plugin_.CompiledResultHandle(), &num_compiled_partitions)) {
//     Dump() << kCompiledResultErr;
//     return;
//   }

//   Dump() << absl::StreamFormat(kCompiledResultTpl, byte_code_size,
//                                num_compiled_partitions);
// }

// void PluginTool::DumpPartitionDetails() const {
//   Dump() << "[[ Partition Results ]]\n";
//   Dump() << "(main subgraph) ";
//   lrt::internal::Dump(MainSubgraph(), Dump());
//   for (const auto& partition : Partitions()) {
//     Dump() << "(partition) ";
//     lrt::internal::Dump(partition, Dump());
//   }
// }

// // Currently new partitioned subgraphs are appended to the model subgraphs
// and
// // there is only support of input models with one subgraph.
// const absl::Span<const LrtSubgraphT> PluginTool::Partitions() const {
//   return absl::MakeConstSpan(model_->subgraphs.data() + 1,
//                              model_->subgraphs.size() - 1);
// }

// LrtStatus PluginTool::Partiion() {
//   LrtOpListT selected_ops;
//   LRT_RETURN_STATUS_IF_NOT_OK(plugin_.Api().partition_model(
//       plugin_.PluginHandle(), model_.get(), &selected_ops));
//   auto partitions = GroupPartitions(selected_ops.ops);

//   CustomOps().reserve(partitions.size());

//   for (auto& partition : partitions) {
//     LrtSubgraph new_subgraph = &model_->subgraphs.emplace_back();
//     CustomOps().push_back(
//         OutlinePartition(MainSubgraph(), new_subgraph, partition));
//   }

//   return kLrtStatusOk;
// }

// LrtStatus PluginTool::Compile(const absl::string_view soc_models) {
//   LRT_RETURN_STATUS_IF_NOT_OK(
//       plugin_.Api().compile(plugin_.PluginHandle(), soc_model.data(),
//                             slices.data(), slices.size(), &compiled_result));

//   lrt_param_index_t num_calls_compiled;
//   LRT_RETURN_STATUS_IF_NOT_OK(
//       LrtCompiledResultGetNumCalls(compiled_result, &num_calls_compiled));

//   if (num_calls_compiled != slices.size()) {
//     std::cerr
//         << "Plugin must provide and entry point for each compiled
//         partition\n";
//     return kLrtStatusErrorNotFound;
//   }

//   for (int i = 0; i < num_calls_compiled; ++i) {
//     const void* call_info;
//     size_t call_info_size;

//     LRT_RETURN_STATUS_IF_NOT_OK(LrtCompiledResultGetCallInfo(
//         compiled_result, i, &call_info, &call_info_size));

//     auto* custom_op = custom_ops.at(i);
//     custom_op->custom_options.assign(reinterpret_cast<const
//     char*>(call_info),
//                                      call_info_size);
//   }
//   return kLrtStatusOk;
// }

// LrtStatus PluginTool::Serialize(const absl::string_view soc_model,
//                                 std::ostream& out) {
//   uint8_t* buf;
//   size_t size;
//   size_t offset;
//   LRT_RETURN_STATUS_IF_NOT_OK(
//       SerializeModel(model_.release(), &buf, &size, &offset));
//   const char* cbuf = reinterpret_cast<const char*>(buf);
//   out.write(cbuf + offset, size - offset);
//   delete[] buf;
//   return kLrtStatusOk;
// }