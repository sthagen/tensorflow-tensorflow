syntax = "proto3";

package proto_splitter;

import "tensorflow/tools/proto_splitter/versions.proto";

option cc_enable_arenas = true;

message ChunkedProto {
  ChunkedMessage message = 1;
  VersionDef version = 2;
}

message ChunkedMessage {
  // Data contained in this Chunk.
  BlobDef data = 1;
  // The same field can appear multiple times in this list. When this
  // happens, the parsed blob data is joined in the order that they appear.
  // The way the field is joined depends on the type of field. e.g. Repeated
  // fields are joined by appending them, bytes are joined concatenated.
  repeated ChunkedField chunked_fields = 2;
}

message ChunkedField {
  // Stores the nested field numbers, which tell us where and how to rejoin
  // this chunk.
  // E.g. If the parent ChunkedMessage contains a GraphDef,
  // a field tag could point to:
  //    `GraphDef.node[15].attr["value"].tensor.float_value`
  // uint32 is used to represent field tags:https://stackoverflow.com/a/63666587
  repeated uint32 field_tag = 1;
  // Whether the type is the same as the parent. Used to store repeated
  // fields (e.g. Graph.node[100:150] is stored as a GraphDef proto with
  // 50 nodes).
  bool repeated_type = 2;
  ChunkedMessage message = 3;  // This allows us to build a tree of chunked
                               // messages.
}

message BlobDef {
  string filename = 1;   // File where the blob is stored.
  uint64 offset = 2;     // Byte offset or Chunk index in Reigeli format.
  uint64 size = 3;       // Size of this blob in bytes
  string data_type = 4;  // Type (e.g. "proto" or "scalar")
}