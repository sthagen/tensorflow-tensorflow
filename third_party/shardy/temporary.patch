diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 8c653ad..e29e872 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,214 +1,342 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/include/clang/Sema/Sema.h b/clang/include/clang/Sema/Sema.h
---- a/clang/include/clang/Sema/Sema.h
-+++ b/clang/include/clang/Sema/Sema.h
-@@ -10639,9 +10639,9 @@
-   /// BuildOverloadedArrowExpr - Build a call to an overloaded @c operator->
-   ///  (if one exists), where @c Base is an expression of class type and
-   /// @c Member is the name of the member we're trying to find.
--  ExprResult BuildOverloadedArrowExpr(Expr *Base, SourceLocation OpLoc,
--                                      bool *NoArrowOperatorFound,
--                                      bool &IsDependent);
-+  ExprResult BuildOverloadedArrowExpr(Scope *S, Expr *Base,
-+                                      SourceLocation OpLoc,
-+                                      bool *NoArrowOperatorFound = nullptr);
- 
-   ExprResult BuildCXXMemberCallExpr(Expr *Exp, NamedDecl *FoundDecl,
-                                     CXXConversionDecl *Method,
-diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaExprCXX.cpp b/clang/lib/Sema/SemaExprCXX.cpp
---- a/clang/lib/Sema/SemaExprCXX.cpp
-+++ b/clang/lib/Sema/SemaExprCXX.cpp
-@@ -7966,6 +7966,18 @@
- 
-   QualType BaseType = Base->getType();
-   MayBePseudoDestructor = false;
-+  if (BaseType->isDependentType()) {
-+    // If we have a pointer to a dependent type and are using the -> operator,
-+    // the object type is the type that the pointer points to. We might still
-+    // have enough information about that type to do something useful.
-+    if (OpKind == tok::arrow)
-+      if (const PointerType *Ptr = BaseType->getAs<PointerType>())
-+        BaseType = Ptr->getPointeeType();
-+
-+    ObjectType = ParsedType::make(BaseType);
-+    MayBePseudoDestructor = true;
-+    return Base;
-+  }
- 
-   // C++ [over.match.oper]p8:
-   //   [...] When operator->returns, the operator-> is applied  to the value
-@@ -7980,8 +7992,7 @@
-     SmallVector<FunctionDecl*, 8> OperatorArrows;
-     CTypes.insert(Context.getCanonicalType(BaseType));
- 
--    while (
--        isa<InjectedClassNameType, RecordType>(BaseType.getCanonicalType())) {
-+    while (BaseType->isRecordType()) {
-       if (OperatorArrows.size() >= getLangOpts().ArrowDepth) {
-         Diag(OpLoc, diag::err_operator_arrow_depth_exceeded)
-           << StartingType << getLangOpts().ArrowDepth << Base->getSourceRange();
-@@ -7991,26 +8002,15 @@
-         return ExprError();
-       }
- 
--      bool IsDependent;
-       Result = BuildOverloadedArrowExpr(
--          Base, OpLoc,
-+          S, Base, OpLoc,
-           // When in a template specialization and on the first loop iteration,
-           // potentially give the default diagnostic (with the fixit in a
-           // separate note) instead of having the error reported back to here
-           // and giving a diagnostic with a fixit attached to the error itself.
-           (FirstIteration && CurFD && CurFD->isFunctionTemplateSpecialization())
-               ? nullptr
--              : &NoArrowOperatorFound,
--          IsDependent);
--
--      if (IsDependent) {
--        // BuildOverloadedArrowExpr sets IsDependent to indicate that we need
--        // to build a dependent overloaded arrow expression.
--        assert(BaseType->isDependentType());
--        BaseType = Context.DependentTy;
--        break;
--      }
--
-+              : &NoArrowOperatorFound);
-       if (Result.isInvalid()) {
-         if (NoArrowOperatorFound) {
-           if (FirstIteration) {
-@@ -8030,7 +8030,6 @@
-         }
-         return ExprError();
-       }
--
-       Base = Result.get();
-       if (CXXOperatorCallExpr *OpCall = dyn_cast<CXXOperatorCallExpr>(Base))
-         OperatorArrows.push_back(OpCall->getDirectCallee());
-@@ -8068,7 +8067,7 @@
-   // it's legal for the type to be incomplete if this is a pseudo-destructor
-   // call.  We'll do more incomplete-type checks later in the lookup process,
-   // so just skip this check for ObjC types.
--  if (!isa<InjectedClassNameType, RecordType>(BaseType.getCanonicalType())) {
-+  if (!BaseType->isRecordType()) {
-     ObjectType = ParsedType::make(BaseType);
-     MayBePseudoDestructor = true;
-     return Base;
-@@ -8086,10 +8085,6 @@
-     return CreateRecoveryExpr(Base->getBeginLoc(), Base->getEndLoc(), {Base});
-   }
- 
--  // We can't implicitly declare the destructor for a templated class.
--  if (BaseType->isDependentType())
--    MayBePseudoDestructor = true;
--
-   // C++ [basic.lookup.classref]p2:
-   //   If the id-expression in a class member access (5.2.5) is an
-   //   unqualified-id, and the type of the object expression is of a class
-diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaOverload.cpp b/clang/lib/Sema/SemaOverload.cpp
---- a/clang/lib/Sema/SemaOverload.cpp
-+++ b/clang/lib/Sema/SemaOverload.cpp
-@@ -15878,14 +15878,12 @@
-   return CheckForImmediateInvocation(MaybeBindToTemporary(TheCall), Method);
+diff -ruN --strip-trailing-cr a/compiler-rt/lib/orc/coff_platform.cpp b/compiler-rt/lib/orc/coff_platform.cpp
+--- a/compiler-rt/lib/orc/coff_platform.cpp
++++ b/compiler-rt/lib/orc/coff_platform.cpp
+@@ -17,7 +17,6 @@
+ 
+ #include "debug.h"
+ #include "error.h"
+-#include "jit_dispatch.h"
+ #include "wrapper_function_utils.h"
+ 
+ #include <array>
+@@ -316,9 +315,9 @@
+   // Call back to the JIT to push the initializers.
+   Expected<COFFJITDylibDepInfoMap> DepInfoMap((COFFJITDylibDepInfoMap()));
+   if (auto Err = WrapperFunction<SPSExpected<SPSCOFFJITDylibDepInfoMap>(
+-          SPSExecutorAddr)>::
+-          call(JITDispatch(&__orc_rt_coff_push_initializers_tag), DepInfoMap,
+-               ExecutorAddr::fromPtr(JDS.Header)))
++          SPSExecutorAddr)>::call(&__orc_rt_coff_push_initializers_tag,
++                                  DepInfoMap,
++                                  ExecutorAddr::fromPtr(JDS.Header)))
+     return Err;
+   if (!DepInfoMap)
+     return DepInfoMap.takeError();
+@@ -446,9 +445,10 @@
+                                                  std::string_view Sym) {
+   Expected<ExecutorAddr> Result((ExecutorAddr()));
+   if (auto Err = WrapperFunction<SPSExpected<SPSExecutorAddr>(
+-          SPSExecutorAddr,
+-          SPSString)>::call(JITDispatch(&__orc_rt_coff_symbol_lookup_tag),
+-                            Result, ExecutorAddr::fromPtr(header), Sym))
++          SPSExecutorAddr, SPSString)>::call(&__orc_rt_coff_symbol_lookup_tag,
++                                             Result,
++                                             ExecutorAddr::fromPtr(header),
++                                             Sym))
+     return std::move(Err);
+   return Result;
  }
+diff -ruN --strip-trailing-cr a/compiler-rt/lib/orc/elfnix_platform.cpp b/compiler-rt/lib/orc/elfnix_platform.cpp
+--- a/compiler-rt/lib/orc/elfnix_platform.cpp
++++ b/compiler-rt/lib/orc/elfnix_platform.cpp
+@@ -14,7 +14,6 @@
+ #include "common.h"
+ #include "compiler.h"
+ #include "error.h"
+-#include "jit_dispatch.h"
+ #include "wrapper_function_utils.h"
  
--ExprResult Sema::BuildOverloadedArrowExpr(Expr *Base, SourceLocation OpLoc,
--                                          bool *NoArrowOperatorFound,
--                                          bool &IsDependent) {
--  assert(Base->getType()->getAsRecordDecl() &&
-+ExprResult
-+Sema::BuildOverloadedArrowExpr(Scope *S, Expr *Base, SourceLocation OpLoc,
-+                               bool *NoArrowOperatorFound) {
-+  assert(Base->getType()->isRecordType() &&
-          "left-hand side must have class type");
- 
--  IsDependent = false;
--
-   if (checkPlaceholderForOverload(*this, Base))
-     return ExprError();
- 
-@@ -15906,19 +15904,7 @@
-     return ExprError();
- 
-   LookupResult R(*this, OpName, OpLoc, LookupOrdinaryName);
--  LookupParsedName(R, /*S=*/nullptr, /*SS=*/nullptr, Base->getType());
--
--  // If the expression is dependent and we either:
--  // - found a member of the current instantiation named 'operator->', or
--  // - found nothing, and the lookup context has no dependent base classes
--  //
--  // then we should build a dependent class member access expression.
--  if (R.wasNotFoundInCurrentInstantiation() ||
--      (Base->isTypeDependent() && !R.empty())) {
--    IsDependent = true;
--    return Base;
+ #include <algorithm>
+@@ -353,9 +352,10 @@
+                                                    std::string_view Sym) {
+   Expected<ExecutorAddr> Result((ExecutorAddr()));
+   if (auto Err = WrapperFunction<SPSExpected<SPSExecutorAddr>(
+-          SPSExecutorAddr,
+-          SPSString)>::call(JITDispatch(&__orc_rt_elfnix_symbol_lookup_tag),
+-                            Result, ExecutorAddr::fromPtr(DSOHandle), Sym))
++          SPSExecutorAddr, SPSString)>::call(&__orc_rt_elfnix_symbol_lookup_tag,
++                                             Result,
++                                             ExecutorAddr::fromPtr(DSOHandle),
++                                             Sym))
+     return std::move(Err);
+   return Result;
+ }
+@@ -368,9 +368,8 @@
+   std::string PathStr(Path.data(), Path.size());
+   if (auto Err =
+           WrapperFunction<SPSExpected<SPSELFNixJITDylibInitializerSequence>(
+-              SPSString)>::
+-              call(JITDispatch(&__orc_rt_elfnix_get_initializers_tag), Result,
+-                   Path))
++              SPSString)>::call(&__orc_rt_elfnix_get_initializers_tag, Result,
++                                Path))
+     return std::move(Err);
+   return Result;
+ }
+diff -ruN --strip-trailing-cr a/compiler-rt/lib/orc/jit_dispatch.h b/compiler-rt/lib/orc/jit_dispatch.h
+--- a/compiler-rt/lib/orc/jit_dispatch.h
++++ b/compiler-rt/lib/orc/jit_dispatch.h
+@@ -1,50 +0,0 @@
+-//===------ jit_dispatch.h - Call back to an ORC controller -----*- C++ -*-===//
+-//
+-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+-// See https://llvm.org/LICENSE.txt for license information.
+-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+-//
+-//===----------------------------------------------------------------------===//
+-//
+-// This file is a part of the ORC runtime support library.
+-//
+-//===----------------------------------------------------------------------===//
+-
+-#ifndef ORC_RT_JIT_DISPATCH_H
+-#define ORC_RT_JIT_DISPATCH_H
+-
+-#include "common.h"
+-#include "wrapper_function_utils.h"
+-
+-namespace orc_rt {
+-
+-class JITDispatch {
+-public:
+-  JITDispatch(const void *FnTag) : FnTag(FnTag) {}
+-
+-  WrapperFunctionResult operator()(const char *ArgData, size_t ArgSize) {
+-    // Since the functions cannot be zero/unresolved on Windows, the following
+-    // reference taking would always be non-zero, thus generating a compiler
+-    // warning otherwise.
+-#if !defined(_WIN32)
+-    if (ORC_RT_UNLIKELY(!&__orc_rt_jit_dispatch_ctx))
+-      return WrapperFunctionResult::createOutOfBandError(
+-                 "__orc_rt_jit_dispatch_ctx not set")
+-          .release();
+-    if (ORC_RT_UNLIKELY(!&__orc_rt_jit_dispatch))
+-      return WrapperFunctionResult::createOutOfBandError(
+-                 "__orc_rt_jit_dispatch not set")
+-          .release();
+-#endif
+-
+-    return __orc_rt_jit_dispatch(&__orc_rt_jit_dispatch_ctx, FnTag, ArgData,
+-                                 ArgSize);
 -  }
 -
-+  LookupQualifiedName(R, Base->getType()->castAs<RecordType>()->getDecl());
-   R.suppressAccessDiagnostics();
- 
-   for (LookupResult::iterator Oper = R.begin(), OperEnd = R.end();
-diff -ruN --strip-trailing-cr a/clang/lib/Sema/TreeTransform.h b/clang/lib/Sema/TreeTransform.h
---- a/clang/lib/Sema/TreeTransform.h
-+++ b/clang/lib/Sema/TreeTransform.h
-@@ -16583,14 +16583,10 @@
-   } else if (Op == OO_Arrow) {
-     // It is possible that the type refers to a RecoveryExpr created earlier
-     // in the tree transformation.
--    if (First->containsErrors())
-+    if (First->getType()->isDependentType())
-       return ExprError();
--    bool IsDependent;
-     // -> is never a builtin operation.
--    ExprResult Result = SemaRef.BuildOverloadedArrowExpr(
--        First, OpLoc, /*NoArrowOperatorFound=*/nullptr, IsDependent);
--    assert(!IsDependent);
--    return Result;
-+    return SemaRef.BuildOverloadedArrowExpr(nullptr, First, OpLoc);
-   } else if (Second == nullptr || isPostIncDec) {
-     if (!First->getType()->isOverloadableType() ||
-         (Op == OO_Amp && getSema().isQualifiedMemberAccess(First))) {
-diff -ruN --strip-trailing-cr a/clang/test/CXX/temp/temp.res/temp.dep/temp.dep.type/p4.cpp b/clang/test/CXX/temp/temp.res/temp.dep/temp.dep.type/p4.cpp
---- a/clang/test/CXX/temp/temp.res/temp.dep/temp.dep.type/p4.cpp
-+++ b/clang/test/CXX/temp/temp.res/temp.dep/temp.dep.type/p4.cpp
-@@ -484,19 +484,16 @@
-   template<typename T>
-   struct A {
-     void not_instantiated(A a, A<T> b, T c) {
--      a->x; // expected-error {{member reference type 'A<T>' is not a pointer; did you mean to use '.'?}}
--      b->x; // expected-error {{member reference type 'A<T>' is not a pointer; did you mean to use '.'?}}
-+      a->x;
-+      b->x;
-       c->x;
-     }
- 
-     void instantiated(A a, A<T> b, T c) {
--      // FIXME: We should only emit a single diagnostic suggesting to use '.'!
--      a->x; // expected-error {{member reference type 'A<T>' is not a pointer; did you mean to use '.'?}}
--            // expected-error@-1 {{member reference type 'A<int>' is not a pointer; did you mean to use '.'?}}
--            // expected-error@-2 {{no member named 'x' in 'N4::A<int>'}}
--      b->x; // expected-error {{member reference type 'A<T>' is not a pointer; did you mean to use '.'?}}
--            // expected-error@-1 {{member reference type 'A<int>' is not a pointer; did you mean to use '.'?}}
--            // expected-error@-2 {{no member named 'x' in 'N4::A<int>'}}
-+      a->x; // expected-error {{member reference type 'A<int>' is not a pointer; did you mean to use '.'?}}
-+            // expected-error@-1 {{no member named 'x' in 'N4::A<int>'}}
-+      b->x; // expected-error {{member reference type 'A<int>' is not a pointer; did you mean to use '.'?}}
-+            // expected-error@-1 {{no member named 'x' in 'N4::A<int>'}}
-       c->x; // expected-error {{member reference type 'int' is not a pointer}}
-     }
-   };
-@@ -543,10 +540,11 @@
-       a->T::f();
-       a->T::g();
- 
--      a->U::x;
--      a->U::y;
--      a->U::f();
--      a->U::g();
-+      // FIXME: 'U' should be a dependent name, and its lookup context should be 'a.operator->()'!
-+      a->U::x; // expected-error {{use of undeclared identifier 'U'}}
-+      a->U::y; // expected-error {{use of undeclared identifier 'U'}}
-+      a->U::f(); // expected-error {{use of undeclared identifier 'U'}}
-+      a->U::g(); // expected-error {{use of undeclared identifier 'U'}}
-     }
- 
-     void instantiated(D a) {
+-private:
+-  const void *FnTag;
+-};
+-
+-} // namespace orc_rt
+-
+-#endif // ORC_RT_JIT_DISPATCH_H
+diff -ruN --strip-trailing-cr a/compiler-rt/lib/orc/macho_platform.cpp b/compiler-rt/lib/orc/macho_platform.cpp
+--- a/compiler-rt/lib/orc/macho_platform.cpp
++++ b/compiler-rt/lib/orc/macho_platform.cpp
+@@ -16,7 +16,6 @@
+ #include "debug.h"
+ #include "error.h"
+ #include "interval_map.h"
+-#include "jit_dispatch.h"
+ #include "wrapper_function_utils.h"
+ 
+ #include <algorithm>
+@@ -916,7 +915,7 @@
+   Error OpErr = Error::success();
+   if (auto Err = WrapperFunction<SPSError(
+           SPSExecutorAddr, SPSSequence<SPSTuple<SPSString, bool>>)>::
+-          call(JITDispatch(&__orc_rt_macho_push_symbols_tag), OpErr,
++          call(&__orc_rt_macho_push_symbols_tag, OpErr,
+                ExecutorAddr::fromPtr(JDS.Header), Symbols)) {
+     cantFail(std::move(OpErr));
+     return std::move(Err);
+@@ -1146,9 +1145,8 @@
+   // Unlock so that we can accept the initializer update.
+   JDStatesLock.unlock();
+   if (auto Err = WrapperFunction<SPSExpected<SPSMachOJITDylibDepInfoMap>(
+-          SPSExecutorAddr)>::
+-          call(JITDispatch(&__orc_rt_macho_push_initializers_tag), DepInfo,
+-               ExecutorAddr::fromPtr(JDS.Header)))
++          SPSExecutorAddr)>::call(&__orc_rt_macho_push_initializers_tag,
++                                  DepInfo, ExecutorAddr::fromPtr(JDS.Header)))
+     return Err;
+   JDStatesLock.lock();
+ 
+diff -ruN --strip-trailing-cr a/compiler-rt/lib/orc/wrapper_function_utils.h b/compiler-rt/lib/orc/wrapper_function_utils.h
+--- a/compiler-rt/lib/orc/wrapper_function_utils.h
++++ b/compiler-rt/lib/orc/wrapper_function_utils.h
+@@ -13,9 +13,10 @@
+ #ifndef ORC_RT_WRAPPER_FUNCTION_UTILS_H
+ #define ORC_RT_WRAPPER_FUNCTION_UTILS_H
+ 
++#include "orc_rt/c_api.h"
++#include "common.h"
+ #include "error.h"
+ #include "executor_address.h"
+-#include "orc_rt/c_api.h"
+ #include "simple_packed_serialization.h"
+ #include <type_traits>
+ 
+@@ -287,22 +288,30 @@
+   using ResultSerializer = detail::ResultSerializer<SPSRetTagT, RetT>;
+ 
+ public:
+-  template <typename DispatchFn, typename RetT, typename... ArgTs>
+-  static Error call(DispatchFn &&Dispatch, RetT &Result, const ArgTs &...Args) {
++  template <typename RetT, typename... ArgTs>
++  static Error call(const void *FnTag, RetT &Result, const ArgTs &...Args) {
+ 
+     // RetT might be an Error or Expected value. Set the checked flag now:
+     // we don't want the user to have to check the unused result if this
+     // operation fails.
+     detail::ResultDeserializer<SPSRetTagT, RetT>::makeSafe(Result);
+ 
++    // Since the functions cannot be zero/unresolved on Windows, the following
++    // reference taking would always be non-zero, thus generating a compiler
++    // warning otherwise.
++#if !defined(_WIN32)
++    if (ORC_RT_UNLIKELY(!&__orc_rt_jit_dispatch_ctx))
++      return make_error<StringError>("__orc_rt_jit_dispatch_ctx not set");
++    if (ORC_RT_UNLIKELY(!&__orc_rt_jit_dispatch))
++      return make_error<StringError>("__orc_rt_jit_dispatch not set");
++#endif
+     auto ArgBuffer =
+         WrapperFunctionResult::fromSPSArgs<SPSArgList<SPSTagTs...>>(Args...);
+     if (const char *ErrMsg = ArgBuffer.getOutOfBandError())
+       return make_error<StringError>(ErrMsg);
+ 
+-    WrapperFunctionResult ResultBuffer =
+-        Dispatch(ArgBuffer.data(), ArgBuffer.size());
+-
++    WrapperFunctionResult ResultBuffer = __orc_rt_jit_dispatch(
++        &__orc_rt_jit_dispatch_ctx, FnTag, ArgBuffer.data(), ArgBuffer.size());
+     if (auto ErrMsg = ResultBuffer.getOutOfBandError())
+       return make_error<StringError>(ErrMsg);
+ 
+diff -ruN --strip-trailing-cr a/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td b/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td
+--- a/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td
++++ b/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td
+@@ -978,20 +978,6 @@
+   Float64Regs, int_nvvm_fabs_d>;
+ 
+ //
+-// copysign
+-//
+-
+-def COPYSIGN_F :
+-    NVPTXInst<(outs Float32Regs:$dst), (ins Float32Regs:$src0, Float32Regs:$src1),
+-              "copysign.f32 \t$dst, $src0, $src1;",
+-              [(set Float32Regs:$dst, (fcopysign Float32Regs:$src1, Float32Regs:$src0))]>;
+-
+-def COPYSIGN_D :
+-    NVPTXInst<(outs Float64Regs:$dst), (ins Float64Regs:$src0, Float64Regs:$src1),
+-              "copysign.f64 \t$dst, $src0, $src1;",
+-              [(set Float64Regs:$dst, (fcopysign Float64Regs:$src1, Float64Regs:$src0))]>;
+-
+-//
+ // Abs, Neg bf16, bf16x2
+ //
+ 
+diff -ruN --strip-trailing-cr a/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp b/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp
+--- a/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp
++++ b/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp
+@@ -838,8 +838,8 @@
+   setOperationAction(ISD::FCOPYSIGN, MVT::v2f16, Expand);
+   setOperationAction(ISD::FCOPYSIGN, MVT::bf16, Expand);
+   setOperationAction(ISD::FCOPYSIGN, MVT::v2bf16, Expand);
+-  setOperationAction(ISD::FCOPYSIGN, MVT::f32, Legal);
+-  setOperationAction(ISD::FCOPYSIGN, MVT::f64, Legal);
++  setOperationAction(ISD::FCOPYSIGN, MVT::f32, Expand);
++  setOperationAction(ISD::FCOPYSIGN, MVT::f64, Expand);
+ 
+   // These map to corresponding instructions for f32/f64. f16 must be
+   // promoted to f32. v2f16 is expanded to f16, which is then promoted
+diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/copysign.ll b/llvm/test/CodeGen/NVPTX/copysign.ll
+--- a/llvm/test/CodeGen/NVPTX/copysign.ll
++++ b/llvm/test/CodeGen/NVPTX/copysign.ll
+@@ -1,39 +0,0 @@
+-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
+-; RUN: llc < %s -march=nvptx64 -mcpu=sm_20 -verify-machineinstrs | FileCheck %s
+-; RUN: %if ptxas %{ llc < %s -march=nvptx64 -mcpu=sm_20 -verify-machineinstrs | %ptxas-verify %}
+-
+-target triple = "nvptx64-nvidia-cuda"
+-target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v32:32:32-v64:64:64-v128:128:128-n16:32:64"
+-
+-define float @fcopysign_f(float %a, float %b) {
+-; CHECK-LABEL: fcopysign_f(
+-; CHECK:       {
+-; CHECK-NEXT:    .reg .f32 %f<4>;
+-; CHECK-EMPTY:
+-; CHECK-NEXT:  // %bb.0:
+-; CHECK-NEXT:    ld.param.f32 %f1, [fcopysign_f_param_0];
+-; CHECK-NEXT:    ld.param.f32 %f2, [fcopysign_f_param_1];
+-; CHECK-NEXT:    copysign.f32 %f3, %f2, %f1;
+-; CHECK-NEXT:    st.param.f32 [func_retval0+0], %f3;
+-; CHECK-NEXT:    ret;
+-  %val = call float @llvm.copysign.f32(float %a, float %b)
+-  ret float %val
+-}
+-
+-define double @fcopysign_d(double %a, double %b) {
+-; CHECK-LABEL: fcopysign_d(
+-; CHECK:       {
+-; CHECK-NEXT:    .reg .f64 %fd<4>;
+-; CHECK-EMPTY:
+-; CHECK-NEXT:  // %bb.0:
+-; CHECK-NEXT:    ld.param.f64 %fd1, [fcopysign_d_param_0];
+-; CHECK-NEXT:    ld.param.f64 %fd2, [fcopysign_d_param_1];
+-; CHECK-NEXT:    copysign.f64 %fd3, %fd2, %fd1;
+-; CHECK-NEXT:    st.param.f64 [func_retval0+0], %fd3;
+-; CHECK-NEXT:    ret;
+-  %val = call double @llvm.copysign.f64(double %a, double %b)
+-  ret double %val
+-}
+-
+-declare float @llvm.copysign.f32(float, float)
+-declare double @llvm.copysign.f64(double, double)
+diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/math-intrins.ll b/llvm/test/CodeGen/NVPTX/math-intrins.ll
+--- a/llvm/test/CodeGen/NVPTX/math-intrins.ll
++++ b/llvm/test/CodeGen/NVPTX/math-intrins.ll
+@@ -195,8 +195,9 @@
+ ; check the use of 0.5 to implement round
+ ; CHECK-LABEL: round_double(
+ ; CHECK:       {
+-; CHECK-NEXT:    .reg .pred %p<3>;
+-; CHECK-NEXT:    .reg .f64 %fd<8>;
++; CHECK-NEXT:    .reg .pred %p<4>;
++; CHECK-NEXT:    .reg .b64 %rd<4>;
++; CHECK-NEXT:    .reg .f64 %fd<10>;
+ ; CHECK-EMPTY:
+ ; CHECK-NEXT:  // %bb.0:
+ ; CHECK-NEXT:    ld.param.f64 %fd1, [round_double_param_0];
+@@ -205,10 +206,16 @@
+ ; CHECK-NEXT:    add.rn.f64 %fd3, %fd2, 0d3FE0000000000000;
+ ; CHECK-NEXT:    cvt.rzi.f64.f64 %fd4, %fd3;
+ ; CHECK-NEXT:    selp.f64 %fd5, 0d0000000000000000, %fd4, %p1;
+-; CHECK-NEXT:    copysign.f64 %fd6, %fd1, %fd5;
+-; CHECK-NEXT:    setp.gt.f64 %p2, %fd2, 0d4330000000000000;
+-; CHECK-NEXT:    selp.f64 %fd7, %fd1, %fd6, %p2;
+-; CHECK-NEXT:    st.param.f64 [func_retval0+0], %fd7;
++; CHECK-NEXT:    abs.f64 %fd6, %fd5;
++; CHECK-NEXT:    neg.f64 %fd7, %fd6;
++; CHECK-NEXT:    mov.b64 %rd1, %fd1;
++; CHECK-NEXT:    shr.u64 %rd2, %rd1, 63;
++; CHECK-NEXT:    and.b64 %rd3, %rd2, 1;
++; CHECK-NEXT:    setp.eq.b64 %p2, %rd3, 1;
++; CHECK-NEXT:    selp.f64 %fd8, %fd7, %fd6, %p2;
++; CHECK-NEXT:    setp.gt.f64 %p3, %fd2, 0d4330000000000000;
++; CHECK-NEXT:    selp.f64 %fd9, %fd1, %fd8, %p3;
++; CHECK-NEXT:    st.param.f64 [func_retval0+0], %fd9;
+ ; CHECK-NEXT:    ret;
+   %b = call double @llvm.round.f64(double %a)
+   ret double %b
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/libc/test/src/math/BUILD.bazel b/utils/bazel/llvm-project-overlay/libc/test/src/math/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/libc/test/src/math/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/libc/test/src/math/BUILD.bazel
+@@ -8,7 +8,7 @@
+ 
+ package(default_visibility = ["//visibility:public"])
+ 
+-exports_files(["libc_math_mpfr_test_rules.bzl"])
++exports_files(["libc_math_test_rules.bzl"])
+ 
+ licenses(["notice"])
+ 
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 8291f1d..740c1e9 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "5f74671c85877e03622e8d308aee15ed73ccee7c"
-    LLVM_SHA256 = "238645e6972ca01dbaecbc4d7f1efb13a7643eaa0f1a84c965f6f33f1e003692"
+    LLVM_COMMIT = "7ba6768df8181bc270763333969d4a1d6cc2e160"
+    LLVM_SHA256 = "7bf29d83480dc2fbdaad092c248f673ea317ca97e4db1954cdc9dfeeaaea6960"
 
     tf_http_archive(
         name = name,
