diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index dfa4b78..4f8ac49 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,57 +1,42 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp b/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp
---- a/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp
-+++ b/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp
-@@ -573,7 +573,6 @@
-     // Create __imp_ symbol
-     jitlink::Symbol &Ptr =
-         jitlink::x86_64::createAnonymousPointer(*G, Sec, &Target);
--    auto name = getImpPrefix() + *KV.first;
-     Ptr.setName(G->intern((Twine(getImpPrefix()) + *KV.first).str()));
-     Ptr.setLinkage(jitlink::Linkage::Strong);
-     Ptr.setScope(jitlink::Scope::Default);
-diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/bolt/BUILD.bazel b/utils/bazel/llvm-project-overlay/bolt/BUILD.bazel
---- a/utils/bazel/llvm-project-overlay/bolt/BUILD.bazel
-+++ b/utils/bazel/llvm-project-overlay/bolt/BUILD.bazel
-@@ -285,6 +285,7 @@
-         "//llvm:MCParser",
-         "//llvm:Object",
-         "//llvm:ObjectYAML",
-+        "//llvm:OrcShared",
-         "//llvm:Support",
-         "//llvm:TargetParser",
-         "//llvm:config",
-diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/libc/BUILD.bazel b/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
---- a/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
-+++ b/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
-@@ -1442,7 +1442,10 @@
-     hdrs = glob(["src/__support/time/*.h"]),
-     deps = [
-         ":__support_common",
-+        ":__support_error_or",
-         ":hdr_time_macros",
-+        ":types_clockid_t",
-+        ":types_struct_timespec",
-         ":types_time_t",
-     ],
- )
-@@ -1486,6 +1489,8 @@
-         ":__support_common",
-         ":__support_error_or",
-         ":__support_osutil_vdso",
-+        ":types_clockid_t",
-+        ":types_struct_timespec",
-     ],
- )
+diff -ruN --strip-trailing-cr a/clang/docs/ReleaseNotes.rst b/clang/docs/ReleaseNotes.rst
+--- a/clang/docs/ReleaseNotes.rst
++++ b/clang/docs/ReleaseNotes.rst
+@@ -796,7 +796,6 @@
+ - Fixed an assertion failure caused by mangled names with invalid identifiers. (#GH112205)
+ - Fixed an incorrect lambda scope of generic lambdas that caused Clang to crash when computing potential lambda
+   captures at the end of a full expression. (#GH115931)
+-- Clang no longer rejects deleting a pointer of incomplete enumeration type. (#GH99278)
  
-diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel b/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
---- a/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
-+++ b/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
-@@ -2800,6 +2800,7 @@
-         ":MC",
-         ":MCDisassembler",
-         ":Object",
-+        ":OrcShared",
-         ":OrcTargetProcess",
-         ":Passes",
-         ":Support",
+ Bug Fixes to AST Handling
+ ^^^^^^^^^^^^^^^^^^^^^^^^^
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaExprCXX.cpp b/clang/lib/Sema/SemaExprCXX.cpp
+--- a/clang/lib/Sema/SemaExprCXX.cpp
++++ b/clang/lib/Sema/SemaExprCXX.cpp
+@@ -3747,8 +3747,7 @@
+     } else if (!Pointee->isDependentType()) {
+       // FIXME: This can result in errors if the definition was imported from a
+       // module but is hidden.
+-      if (!Pointee->isStructureOrClassType() ||
+-          !RequireCompleteType(StartLoc, Pointee,
++      if (!RequireCompleteType(StartLoc, Pointee,
+                                LangOpts.CPlusPlus26
+                                    ? diag::err_delete_incomplete
+                                    : diag::warn_delete_incomplete,
+diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/new-delete.cpp b/clang/test/SemaCXX/new-delete.cpp
+--- a/clang/test/SemaCXX/new-delete.cpp
++++ b/clang/test/SemaCXX/new-delete.cpp
+@@ -540,13 +540,6 @@
+   void f(A *x) { delete x; } // expected-warning {{delete called on 'PR10504::A' that is abstract but has non-virtual destructor}}
+ }
+ 
+-#if __cplusplus >= 201103L
+-enum GH99278_1 {
+-    zero = decltype(delete static_cast<GH99278_1*>(nullptr), 0){}
+-    // expected-warning@-1 {{expression with side effects has no effect in an unevaluated context}}
+-};
+-#endif
+-
+ struct PlacementArg {};
+ inline void *operator new[](size_t, const PlacementArg &) throw () {
+   return 0;
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index e60a1c8..7c3347b 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "2ccf7ed277df28651b94bbee9fccefdf22fb074f"
-    LLVM_SHA256 = "ca68a54dcd12c0dde32732a90899bf57e0f3f96fc43d8d1124d95a5eae627508"
+    LLVM_COMMIT = "1d95825d4d168a17a4f27401dec3f2977a59a70e"
+    LLVM_SHA256 = "d3276c678b616c0d820fe14a3404b43591f4e1bc75b6bed2782e0776e0c9b401"
 
     tf_http_archive(
         name = name,
