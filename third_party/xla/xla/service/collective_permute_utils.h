/* Copyright 2025 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#ifndef XLA_SERVICE_COLLECTIVE_PERMUTE_UTILS_H_
#define XLA_SERVICE_COLLECTIVE_PERMUTE_UTILS_H_

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include "xla/hlo/ir/hlo_instructions.h"

namespace xla {
namespace cp_utils {

using SourceTargetPair = std::pair<int64_t, int64_t>;
using SourceTargetPairs = std::vector<SourceTargetPair>;

// Source Targe Pairs to a cannoical string such as {{0,1},{1,2},{2,3},{3,0}}.
std::string SourceTargetPairsString(const HloCollectivePermuteInstruction& cp);

// Returns true if the (source, target) relationship has a cycle.
bool HasCycles(const SourceTargetPairs& pairs);

// Returns true if the (source, target) pairs form a forward cycle with all
// participants in the cycle, such as {{0,1},{1,2},{2,3},{3,0}}. We assume that
// the (source, target) pairs are ordered via increasing source IDs, as they are
// currently generated by SPMD partitioning.
bool IsForwardCycle(const SourceTargetPair& backedge,
                    const SourceTargetPairs& others);

// Returns true if the (source, target) pairs form a backward cycle with all
// participants in the cycle, such as {{0,3},{1,0},{2,1},{3,2}}. We assume that
// the (source, target) pairs are ordered via increasing source IDs, as they are
// currently generated by SPMD partitioning.
bool IsBackwardCycle(const SourceTargetPair& backedge,
                     const SourceTargetPairs& others);

}  // namespace cp_utils
}  // namespace xla
#endif  // XLA_SERVICE_COLLECTIVE_PERMUTE_UTILS_H_
