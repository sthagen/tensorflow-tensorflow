diff --git a/shardy/dialect/sdy/transforms/export/insert_explicit_reshards.cc b/shardy/dialect/sdy/transforms/export/insert_explicit_reshards.cc
index 04c5ba4..886c546 100644
--- a/shardy/dialect/sdy/transforms/export/insert_explicit_reshards.cc
+++ b/shardy/dialect/sdy/transforms/export/insert_explicit_reshards.cc
@@ -17,6 +17,7 @@ limitations under the License.
 #include <cassert>
 #include <cstdint>
 #include <optional>
+#include <utility>
 
 #include "llvm/ADT/Hashing.h"
 #include "llvm/ADT/STLExtras.h"
@@ -259,66 +260,7 @@ void updateFactorAxesCandidate(FactorAxesCandidatesMap& factorAxesCounts,
                                factorAxes.axes.getShardingSize(mesh));
 }
 
-// A container for FactorAxesCandidates where the order of iteration does not
-// matter, and provides methods to insert and remove candidates in constant-time
-// while maintaining the best through explicit calls on its touchAt method.
-class FactorAxesCandidateBag {
- public:
-  FactorAxesCandidateBag(MeshAttr mesh) : mesh(mesh) {}
-
-  // Returns whether the bag is empty.
-  bool empty() const { return candidates.empty(); }
-
-  // Inserts a new candidate to the bag. Performs in constant-time.
-  void insert(const FactorAxesCandidate& candidate) {
-    candidates.push_back(candidate);
-    bestCandidate = std::max(bestCandidate, candidate);
-  }
-
-  // Updates the sharding size of the one at index as the  product of the
-  // sharding sizes of all individual axes excluding the `prefix`, also update
-  // the best.
-  //
-  // Assumes `prefix` is a prefix of the axes of the candidate at index.
-  void updateShardingSizeAt(const int64_t index,
-                            const AxisListRef& prefix = AxisListRef()) {
-    FactorAxesCandidate& candidate = candidates[index];
-    candidate.shardingSize =
-        candidate.factorAxes.axes.getExpandedShardingSize(mesh, prefix);
-    bestCandidate = std::max(bestCandidate, candidate);
-  }
-
-  // Resets best. Performs in constant-time.
-  void resetBest() { bestCandidate = FactorAxesCandidate(); }
-
-  // Removes candidate at index. Performs in constant-time. After the
-  // operation, the candidates before the index keep being before the index, and
-  // the candidates after the index (except the removed one) keep being after
-  // the index. Assumes that the index is within the bounds and the removed one
-  // is not the best one.
-  //
-  // Since the order of iteration does not matter, it simply swaps the candidate
-  // at index with the last one, hence in the constant time.
-  void removeAt(const int64_t index) {
-    candidates[index] = candidates.back();
-    candidates.pop_back();
-  }
-
-  // Returns the best. Performs in constant-time.
-  FactorAxesCandidate best() const { return bestCandidate; }
-  // Returns the candidate at index. Performs in constant-time.
-  FactorAxesCandidate& at(const int64_t index) { return candidates[index]; }
-  // Returns the number of candidates in the bag.
-  int64_t size() const { return candidates.size(); }
-
- private:
-  SmallVector<FactorAxesCandidate> candidates;
-  FactorAxesCandidate bestCandidate;
-  // Used for recalculating sharding size of a candidate.
-  MeshAttr mesh;
-};
-
-FactorAxesCandidateBag findFactorAxesCandidates(
+SmallVector<FactorAxesCandidate> findFactorAxesCandidates(
     const ShardingProjection& projection, int64_t numFactors,
     ArrayRef<int64_t> tensorSizes, MeshAttr mesh) {
   // Find sets of candidate axes per factor.
@@ -364,9 +306,9 @@ FactorAxesCandidateBag findFactorAxesCandidates(
     }
   }
 
-  FactorAxesCandidateBag factorAxesCandidates(mesh);
+  SmallVector<FactorAxesCandidate> factorAxesCandidates;
   for (const auto& [_, candidate] : factorAxesCandidatesMap) {
-    factorAxesCandidates.insert(candidate);
+    factorAxesCandidates.push_back(candidate);
   }
   return factorAxesCandidates;
 }
@@ -381,19 +323,22 @@ SmallVector<AxisListRef> findCommonAxesUsingMajorityVoteHeuristic(
     const ShardingProjection& projection, int64_t numFactors,
     ArrayRef<int64_t> tensorSizes, MeshAttr mesh) {
   SmallVector<AxisListRef> factorAxisRefs(numFactors);
-  FactorAxesCandidateBag factorAxesCandidates =
+  SmallVector<FactorAxesCandidate> factorAxesCandidates =
       findFactorAxesCandidates(projection, numFactors, tensorSizes, mesh);
   // TODO(enver): Assign an axis to a factor immediately if the count is more
   // than floor(n/2) where n is the number of tensors.
+  // The first iteration is to find the initial best.
+  FactorAxesPair bestFactorAxes;
   while (!factorAxesCandidates.empty()) {
-    FactorAxesPair bestFactorAxes = factorAxesCandidates.best().factorAxes;
-    factorAxesCandidates.resetBest();
-    factorAxisRefs[bestFactorAxes.factorIndex] = bestFactorAxes.axes;
+    if (!bestFactorAxes.empty()) {
+      factorAxisRefs[bestFactorAxes.factorIndex] = bestFactorAxes.axes;
+    }
     // Invalidate axes that overlaps with the picked one across all unseen
     // factors. During the iteration, also find the new best.
+    FactorAxesCandidate nextBestFactorAxes;
     int64_t candidateIndex = 0;
     while (candidateIndex < factorAxesCandidates.size()) {
-      FactorAxesCandidate& candidate = factorAxesCandidates.at(candidateIndex);
+      FactorAxesCandidate& candidate = factorAxesCandidates[candidateIndex];
       // TODO(enver): Relax the overlap check. We need to erase in case of an
       // overlap only if the factor indices appear together in any of the
       // operands or results.
@@ -404,7 +349,8 @@ SmallVector<AxisListRef> findCommonAxesUsingMajorityVoteHeuristic(
         // Drops when the iterated axes is the same as the best one, as a
         // result the best factor-axis pair removed from the map.
         if (!bestFactorAxes.axes.strictPrefixOf(candidate.factorAxes.axes)) {
-          factorAxesCandidates.removeAt(candidateIndex);
+          factorAxesCandidates[candidateIndex] = factorAxesCandidates.back();
+          factorAxesCandidates.pop_back();
         } else {
           // At each iteration, we pick a factor-axes pair that expands
           // on the existing assignment on `factorAxisRefs`. In order to
@@ -415,8 +361,12 @@ SmallVector<AxisListRef> findCommonAxesUsingMajorityVoteHeuristic(
           // factor-axes pair, as we remove all factor-axes pair who can
           // not expand from the picked axes for the picked factor from
           // map at each iteration.
-          factorAxesCandidates.updateShardingSizeAt(
-              candidateIndex++, /*prefix=*/bestFactorAxes.axes);
+          candidate.shardingSize =
+              candidate.factorAxes.axes.getExpandedShardingSize(
+                  mesh,
+                  /*prefix=*/bestFactorAxes.axes);
+          nextBestFactorAxes = std::max(nextBestFactorAxes, candidate);
+          candidateIndex++;
         }
         continue;
       }
@@ -434,18 +384,24 @@ SmallVector<AxisListRef> findCommonAxesUsingMajorityVoteHeuristic(
         //   the current assignment of candidate's factor).
         if (candidate.factorAxes.axes ==
             factorAxisRefs[candidate.factorAxes.factorIndex]) {
-          factorAxesCandidates.removeAt(candidateIndex);
+          factorAxesCandidates[candidateIndex] = factorAxesCandidates.back();
+          factorAxesCandidates.pop_back();
         } else {
           // Trim the axes to use the largest prefix that does not overlap
           // with the picked one.
-          factorAxesCandidates.updateShardingSizeAt(
-              candidateIndex++,
-              /*prefix=*/factorAxisRefs[candidate.factorAxes.factorIndex]);
+          candidate.shardingSize =
+              candidate.factorAxes.axes.getExpandedShardingSize(
+                  mesh,
+                  /*prefix=*/factorAxisRefs[candidate.factorAxes.factorIndex]);
+          nextBestFactorAxes = std::max(nextBestFactorAxes, candidate);
+          candidateIndex++;
         }
         continue;
       }
-      factorAxesCandidates.updateShardingSizeAt(candidateIndex++);
+      nextBestFactorAxes = std::max(nextBestFactorAxes, candidate);
+      candidateIndex++;
     }
+    bestFactorAxes = nextBestFactorAxes.factorAxes;
   }
   return factorAxisRefs;
 }
diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index d502ea7..749af37 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,36 +1,12 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/test/CodeGen/AArch64/fixed-register-global.c b/clang/test/CodeGen/AArch64/fixed-register-global.c
---- a/clang/test/CodeGen/AArch64/fixed-register-global.c
-+++ b/clang/test/CodeGen/AArch64/fixed-register-global.c
-@@ -2,13 +2,13 @@
- /// Regression test for #76426, #109778
+diff -ruN --strip-trailing-cr a/clang/test/Sema/aarch64-sve2-intrinsics/acle_sve2_fp8.c b/clang/test/Sema/aarch64-sve2-intrinsics/acle_sve2_fp8.c
+--- a/clang/test/Sema/aarch64-sve2-intrinsics/acle_sve2_fp8.c
++++ b/clang/test/Sema/aarch64-sve2-intrinsics/acle_sve2_fp8.c
+@@ -1,6 +1,6 @@
  // REQUIRES: aarch64-registered-target
  
--// RUN: %clang -c --target=aarch64-none-gnu -ffixed-x15 %s 2>&1 | count 0
-+// RUN: %clang -c --target=aarch64-none-gnu -ffixed-x15 %s -o /dev/null 2>&1 | count 0
+-// RUN: %clang_cc1 -triple aarch64-none-linux-gnu -target-feature +sve -verify -emit-llvm %s
++// RUN: %clang_cc1 -triple aarch64-none-linux-gnu -target-feature +sve -verify -emit-llvm -o - %s
  
--// RUN: not %clang -c --target=aarch64-none-gnu %s 2>&1 | \
-+// RUN: not %clang -c --target=aarch64-none-gnu %s -o /dev/null 2>&1 | \
- // RUN:   FileCheck %s --check-prefix=ERR_INVREG
- // ERR_INVREG: error: register 'x15' unsuitable for global register variables on this target
+ #include <arm_sve.h>
  
--// RUN: not %clang -c --target=aarch64-none-gnu -ffixed-x15 -DTYPE=short %s 2>&1 | \
-+// RUN: not %clang -c --target=aarch64-none-gnu -ffixed-x15 -DTYPE=short %s -o /dev/null 2>&1 | \
- // RUN:   FileCheck %s --check-prefix=ERR_SIZE
- // ERR_SIZE: error: size of register 'x15' does not match variable size
- 
-diff -ruN --strip-trailing-cr a/clang/test/Driver/config-file.c b/clang/test/Driver/config-file.c
---- a/clang/test/Driver/config-file.c
-+++ b/clang/test/Driver/config-file.c
-@@ -85,9 +85,9 @@
- 
- //--- The linker input flags should be moved to the end of input list and appear only when linking.
- // RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg %s -lmylib -Wl,foo.a -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING
--// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp %s -lmylib -Wl,foo.a -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING-LIBOMP-GOES-AFTER
-+// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp=libomp %s -lmylib -Wl,foo.a -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING-LIBOMP-GOES-AFTER
- // RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING
--// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING-OPENMP
-+// RUN: %clang --target=aarch64-unknown-linux-gnu --config %S/Inputs/config-l.cfg -fopenmp=libomp -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING-OPENMP
- // RUN: %clang --target=x86_64-pc-windows-msvc    --config %S/Inputs/config-l.cfg %s -lmylib -Wl,foo.lib -### 2>&1 | FileCheck %s -check-prefix CHECK-LINKING-MSVC
- // RUN: %clang --target=x86_64-pc-windows-msvc    --config %S/Inputs/config-l.cfg -S %s -### 2>&1 | FileCheck %s -check-prefix CHECK-NOLINKING-MSVC
- // CHECK-LINKING: Configuration file: {{.*}}Inputs{{.}}config-l.cfg
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 1111785..74f9c66 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "0f7b3a9407d20e6a4d33ea623e05cf2a3f65eabd"
-    LLVM_SHA256 = "24d636fc5151597708e31224461782a6f7a4f4c39e61f8827348d481c68b43d3"
+    LLVM_COMMIT = "eacdbc269e5f14292222123150a0e4ff0ad6301d"
+    LLVM_SHA256 = "9a15669d8373f48717aa081e8abc31af7b12acec3e1cff135729343b6b99dd31"
 
     tf_http_archive(
         name = name,
