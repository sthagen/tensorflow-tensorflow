diff --git a/shardy/dialect/sdy/ir/attrs.td b/shardy/dialect/sdy/ir/attrs.td
index a88952d..709562e 100644
--- a/shardy/dialect/sdy/ir/attrs.td
+++ b/shardy/dialect/sdy/ir/attrs.td
@@ -45,15 +45,42 @@ def Sdy_MeshAxis : AttrDef<Sdy_Dialect, "MeshAxis"> {
 
 def Sdy_Mesh : AttrDef<Sdy_Dialect, "Mesh"> {
   let mnemonic = "mesh";
-  let summary = "Mesh of named axes or a device id";
+  let summary = "Mesh of axes and a list of devices";
   let description = [{
-    "A mesh is either a list of axes or a single device id but can't have both."
+    A mesh is a list of axes and an optional list of device IDs specifying the
+    device ordering.
+
+    If the list of axes is empty, the mesh has an implicit unnamed axis of
+    size 1. In this case, if a device ID list is not provided, the implicit
+    device ID list is [0]; if a device ID list is provided, it must
+    contains a single integer of any non-negative value. We call this
+    maximal-sharding case.
+
+    For all non-maximal-sharding cases, if a device ID list is specified, the
+    product of the axis sizes should match the number of devices. If a device ID
+    list is not specified, the implicit device ID list is iota(product(axes)).
+    For simplicity, we also disallow specifying a device ID list that is the
+    same as iota(product(axes)); in this case, a device ID list shouldn't be
+    specified.
+
+  Here are some examples of meshes:
+
+    - An empty mesh represents a mesh with an unnamed axis of size 1 and device
+      ID 0: <>
+    - A mesh with an unnamed axis and an explicit device ID, which is typically
+      used to represent maximal sharding: <device_ids=[3]>
+    - A mesh with two axes and implicit device IDs iota(6): <["a"=2, "b"=3]>
+    - A mesh with two axes and explicit device IDs specifying the device
+      ordering: <["a"=3, "b"=2] device_ids=[0, 2, 4, 1, 3, 5]>
   }];
   let parameters = (ins
       OptionalArrayRefParameter<"MeshAxisAttr">:$axes,
-      OptionalParameter<"std::optional<int64_t>">: $device_id
+      OptionalArrayRefParameter<"int64_t">: $device_ids
   );
-  let hasCustomAssemblyFormat = 1;
+
+  let assemblyFormat = [{
+    `<` (`[` $axes^ `]`)? (`device_ids` `` `=` `` `[` $device_ids^ `]` )? `>`
+  }];
 
   let genVerifyDecl = 1;
 
@@ -62,7 +89,7 @@ def Sdy_Mesh : AttrDef<Sdy_Dialect, "Mesh"> {
       return $_get($_ctxt, axes, /*device_id=*/std::nullopt);
     }]>,
     AttrBuilder<(ins "int64_t":$device_id), [{
-      return $_get($_ctxt, /*axes=*/ArrayRef<MeshAxisAttr>(), device_id);
+      return $_get($_ctxt, /*axes=*/ArrayRef<MeshAxisAttr>(), ArrayRef<int64_t>(device_id));
     }]>,
   ];
 
diff --git a/shardy/dialect/sdy/ir/parsers.cc b/shardy/dialect/sdy/ir/parsers.cc
index c20f17f..7748bc2 100644
--- a/shardy/dialect/sdy/ir/parsers.cc
+++ b/shardy/dialect/sdy/ir/parsers.cc
@@ -46,53 +46,6 @@ limitations under the License.
 namespace mlir {
 namespace sdy {
 
-Attribute MeshAttr::parse(AsmParser& parser, Type type) {
-  MLIRContext* context = parser.getContext();
-  SMLoc location = parser.getCurrentLocation();
-  llvm::SmallVector<MeshAxisAttr> axes;
-  std::optional<int64_t> optDeviceId;
-  if (parser.parseLess()) {
-    return MeshAttr();
-  }
-  if (!parser.parseOptionalKeyword("device_ids")) {
-    if (parser.parseEqual()) {
-      return MeshAttr();
-    }
-    int64_t deviceId;
-    if (parser.parseLSquare()) {
-      return MeshAttr();
-    }
-    if (parser.parseInteger(deviceId)) {
-      return MeshAttr();
-    }
-    optDeviceId = deviceId;
-    if (parser.parseRSquare() || parser.parseGreater()) {
-      return MeshAttr();
-    }
-  } else if (parser.parseOptionalGreater()) {
-    auto parseElementFn = [&]() -> ParseResult {
-      if (auto meshAxis = MeshAxisAttr::parse(parser, type)) {
-        axes.push_back(mlir::cast<MeshAxisAttr>(meshAxis));
-        return success();
-      }
-      return failure();
-    };
-    if (parser.parseLSquare()) {
-      return MeshAttr();
-    }
-    if (parser.parseCommaSeparatedList(AsmParser::Delimiter::None,
-                                       parseElementFn) ||
-        parser.parseRSquare()) {
-      return MeshAttr();
-    }
-    if (parser.parseGreater()) {
-      return MeshAttr();
-    }
-  }
-  return parser.getChecked<MeshAttr>(
-      location, context, llvm::ArrayRef<MeshAxisAttr>(axes), optDeviceId);
-}
-
 Attribute DimensionShardingAttr::parse(AsmParser& parser, Type type) {
   if (parser.parseLBrace()) {
     return DimensionShardingAttr();
diff --git a/shardy/dialect/sdy/ir/printers.cc b/shardy/dialect/sdy/ir/printers.cc
index 1e1415a..8be1771 100644
--- a/shardy/dialect/sdy/ir/printers.cc
+++ b/shardy/dialect/sdy/ir/printers.cc
@@ -30,23 +30,6 @@ limitations under the License.
 namespace mlir {
 namespace sdy {
 
-void MeshAttr::print(AsmPrinter& printer) const {
-  printer << "<";
-  if (getDeviceId().has_value()) {
-    printer << "device_ids=[" << *getDeviceId() << "]";
-  } else {
-    if (!getAxes().empty()) {
-      printer << "[";
-    }
-    llvm::interleaveComma(getAxes(), printer,
-                          [&](MeshAxisAttr axis) { axis.print(printer); });
-    if (!getAxes().empty()) {
-      printer << "]";
-    }
-  }
-  printer << ">";
-}
-
 void DimensionShardingAttr::print(AsmPrinter& printer) const {
   printer << "{";
   printer.printStrippedAttrOrType(getAxes());
diff --git a/shardy/dialect/sdy/ir/test/mesh_parse_print.mlir b/shardy/dialect/sdy/ir/test/mesh_parse_print.mlir
index 3a9bff6..3f7593c 100644
--- a/shardy/dialect/sdy/ir/test/mesh_parse_print.mlir
+++ b/shardy/dialect/sdy/ir/test/mesh_parse_print.mlir
@@ -1,13 +1,22 @@
 // RUN: sdy_opt %s 2>&1 | FileCheck %s
 
-// CHECK: sdy.mesh @mesh = <device_ids=[0]>
-sdy.mesh @mesh = <device_ids=[0]>
+// CHECK: sdy.mesh @empty_mesh = <>
+sdy.mesh @empty_mesh = <>
 
-// CHECK: sdy.mesh @mesh2 = <["a"=2]>
-sdy.mesh @mesh2 = <["a"=2]>
+// CHECK: sdy.mesh @maximal_mesh_1 = <device_ids=[0]>
+sdy.mesh @maximal_mesh_1 = <device_ids=[0]>
 
-// CHECK: sdy.mesh @mesh3 = <["a"=2, "b"=1]>
-sdy.mesh @mesh3 = <["a"=2, "b"=1]>
+// CHECK: sdy.mesh @maximal_mesh_2 = <device_ids=[3]>
+sdy.mesh @maximal_mesh_2 = <device_ids=[3]>
 
-// CHECK: sdy.mesh @mesh4 = <>
-sdy.mesh @mesh4 = <>
+// CHECK: sdy.mesh @single_axis = <["a"=2]>
+sdy.mesh @single_axis = <["a"=2]>
+
+// CHECK: sdy.mesh @single_axis_explicit_device_ids = <["a"=2]device_ids=[1, 0]>
+sdy.mesh @single_axis_explicit_device_ids = <["a"=2] device_ids=[1, 0]>
+
+// CHECK: sdy.mesh @two_axes = <["a"=2, "b"=1]>
+sdy.mesh @two_axes = <["a"=2, "b"=1]>
+
+// CHECK: sdy.mesh @two_axes_explicit_device_ids = <["a"=2, "b"=1]device_ids=[1, 0]>
+sdy.mesh @two_axes_explicit_device_ids = <["a"=2, "b"=1] device_ids=[1, 0]>
diff --git a/shardy/dialect/sdy/ir/test/mesh_verification.mlir b/shardy/dialect/sdy/ir/test/mesh_verification.mlir
index c2bdb25..29d23f9 100644
--- a/shardy/dialect/sdy/ir/test/mesh_verification.mlir
+++ b/shardy/dialect/sdy/ir/test/mesh_verification.mlir
@@ -1,6 +1,7 @@
 // RUN: sdy_opt %s -split-input-file -verify-diagnostics
 
-// expected-error @+1 {{axis size must be at least 1, got: 0}}
+// expected-error @below {{axis size must be at least 1, got: 0}}
+// expected-error @below {{custom op 'sdy.mesh' failed to parse Sdy_Mesh parameter 'axes' which is to be a `::llvm::ArrayRef<MeshAxisAttr>`}}
 sdy.mesh @mesh = <["a"=2, "b"=0]>
 
 // -----
@@ -13,5 +14,25 @@ sdy.mesh @mesh = <["a"=2, "b"=2, "a"=4]>
 sdy.mesh @mesh = <device_ids=[-1]>
 
 // -----
-// expected-error @+1 {{expected '>'}}
-sdy.mesh @mesh = <["a"=2, "b"=2], device_ids=[2]>
+// expected-error @+1 {{total product of axis sizes must match total number of device ids, got: 1 != 2}}
+sdy.mesh @mesh = <device_ids=[1, 0]>
+
+// -----
+// expected-error @+1 {{total product of axis sizes must match total number of device ids, got: 4 != 6}}
+sdy.mesh @mesh = <["a"=2, "b"=2] device_ids=[0, 2, 1, 3, 4, 5]>
+
+// -----
+// expected-error @+1 {{custom op 'sdy.mesh' total product of axis sizes must match total number of device ids, got: 2 != 1}}
+sdy.mesh @mesh = <["a"=2] device_ids=[0]>
+
+// -----
+// expected-error @+1 {{custom op 'sdy.mesh' if the ordered device ids are the same as iota(product(axes)), no need to specify them for simplicity}}
+sdy.mesh @mesh_iota_device_ids = <["a"=2] device_ids=[0, 1]>
+
+// -----
+// expected-error @+1 {{custom op 'sdy.mesh' sorted device ids must be iota(product(axes)), got: 1, 1}}
+sdy.mesh @mesh_duplicated_device_ids = <["a"=2] device_ids=[1, 1]>
+
+// -----
+// expected-error @+1 {{custom op 'sdy.mesh' sorted device ids must be iota(product(axes)), got: 1, 2}}
+sdy.mesh @mesh_out_if_bound_device_ids = <["a"=2] device_ids=[2, 1]>
diff --git a/shardy/dialect/sdy/ir/verifiers.cc b/shardy/dialect/sdy/ir/verifiers.cc
index e8d6f29..d7cb0b0 100644
--- a/shardy/dialect/sdy/ir/verifiers.cc
+++ b/shardy/dialect/sdy/ir/verifiers.cc
@@ -16,14 +16,17 @@ limitations under the License.
 #include <algorithm>
 #include <cstdint>
 #include <functional>
+#include <numeric>
 #include <optional>
 #include <utility>
+#include <vector>
 
 #include "llvm/ADT/ArrayRef.h"
 #include "llvm/ADT/DenseMap.h"
 #include "llvm/ADT/DenseSet.h"
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/STLFunctionalExtras.h"
+#include "llvm/ADT/Sequence.h"
 #include "llvm/ADT/SmallVector.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/Support/ErrorHandling.h"
@@ -547,19 +550,55 @@ LogicalResult MeshAxisAttr::verify(
 
 LogicalResult MeshAttr::verify(
     llvm::function_ref<InFlightDiagnostic()> emitError,
-    ArrayRef<MeshAxisAttr> axes, std::optional<int64_t> deviceId) {
-  if (deviceId && !axes.empty()) {
-    return emitError() << "mesh cannot have both axes and device id";
-  }
+    ArrayRef<MeshAxisAttr> axes, ArrayRef<int64_t> deviceIds) {
   SmallDenseSet<StringRef> seenAxisNames;
   for (MeshAxisAttr axis : axes) {
     if (!seenAxisNames.insert(axis.getName()).second) {
       return emitError() << "duplicate axis name: \"" << axis.getName() << "\"";
     }
   }
-  if (deviceId && *deviceId < 0) {
-    return emitError() << "device id must be non-negative, got: " << *deviceId;
+
+  if (deviceIds.empty()) {
+    // The default device ids are iota(product(axes)).
+    return success();
+  }
+
+  for (int64_t deviceId : deviceIds) {
+    if (deviceId < 0) {
+      return emitError() << "device id must be non-negative, got: " << deviceId;
+    }
+  }
+
+  // Verify that the product of axis sizes matches the number of explicit device
+  // ids.
+  int64_t totalDeviceIds = deviceIds.size();
+  int64_t totalProductOfAxes = std::accumulate(
+      axes.begin(), axes.end(), 1,
+      [](int64_t cur, MeshAxisAttr axis) { return cur * axis.getSize(); });
+
+  if (totalProductOfAxes != totalDeviceIds) {
+    return emitError() << "total product of axis sizes must match total number "
+                          "of device ids, got: "
+                       << totalProductOfAxes << " != " << totalDeviceIds;
   }
+
+  if (axes.empty()) {
+    return success();
+  }
+
+  std::vector<int64_t> sortedDeviceIds(deviceIds.begin(), deviceIds.end());
+  llvm::sort(sortedDeviceIds);
+  if (!llvm::equal(sortedDeviceIds, llvm::seq<int64_t>(0, totalDeviceIds))) {
+    return emitError() << "sorted device ids must be iota(product(axes)), got: "
+                       << sortedDeviceIds;
+  }
+
+  if (llvm::is_sorted(deviceIds)) {
+    return emitError() << "if the ordered device ids are the same as "
+                          "iota(product(axes)), no need to specify them for "
+                          "simplicity";
+  }
+
   return success();
 }
 
