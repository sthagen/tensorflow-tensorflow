diff --git a/shardy/dialect/sdy/ir/BUILD b/shardy/dialect/sdy/ir/BUILD
index 780cd17..fe8986b 100644
--- a/shardy/dialect/sdy/ir/BUILD
+++ b/shardy/dialect/sdy/ir/BUILD
@@ -164,6 +164,7 @@ cc_library(
         "@llvm-project//mlir:ShapeDialect",
         "@llvm-project//mlir:SideEffectInterfaces",
         "@llvm-project//mlir:Support",
+        "@llvm-project//mlir:TransformUtils",
         "@stablehlo//:stablehlo_assembly_format",
         "@stablehlo//:stablehlo_ops",
         "@stablehlo//:stablehlo_type_inference",
diff --git a/shardy/dialect/sdy/ir/canonicalization.cc b/shardy/dialect/sdy/ir/canonicalization.cc
index e1b391f..7ab3e28 100644
--- a/shardy/dialect/sdy/ir/canonicalization.cc
+++ b/shardy/dialect/sdy/ir/canonicalization.cc
@@ -25,6 +25,7 @@ limitations under the License.
 #include "mlir/IR/Region.h"
 #include "mlir/IR/Value.h"
 #include "mlir/Support/LLVM.h"
+#include "mlir/Transforms/Inliner.h"
 #include "mlir/Transforms/InliningUtils.h"
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
@@ -103,9 +104,11 @@ class RedundantManualComputationPattern
     }
 
     mlir::InlinerInterface inliner(manualComputationOp.getContext());
+    mlir::InlinerConfig config;
     if (inlineRegion(
-            inliner, &manualComputationOp.getRegion(),
-            manualComputationOp->getBlock(), manualComputationOp->getIterator(),
+            inliner, config.getCloneCallback(),
+            &manualComputationOp.getRegion(), manualComputationOp->getBlock(),
+            manualComputationOp->getIterator(),
             manualComputationOp.getOperands(), manualComputationOp.getResults())
             .failed()) {
       manualComputationOp.emitOpError(
diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 97282ec..a3ecef4 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,16 +1,4 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/lib/AST/ASTContext.cpp b/clang/lib/AST/ASTContext.cpp
---- a/clang/lib/AST/ASTContext.cpp
-+++ b/clang/lib/AST/ASTContext.cpp
-@@ -7011,7 +7011,7 @@
-         getCanonicalTemplateArgument(subst->getArgumentPack());
-     return getSubstTemplateTemplateParmPack(
-         canonArgPack, subst->getAssociatedDecl()->getCanonicalDecl(),
--        subst->getFinal(), subst->getIndex());
-+        subst->getIndex(), subst->getFinal());
-   }
-   case TemplateName::DeducedTemplate: {
-     assert(IgnoreDeduced == false);
 diff -ruN --strip-trailing-cr a/clang/lib/Sema/TreeTransform.h b/clang/lib/Sema/TreeTransform.h
 --- a/clang/lib/Sema/TreeTransform.h
 +++ b/clang/lib/Sema/TreeTransform.h
@@ -44,28 +32,6 @@ diff -ruN --strip-trailing-cr a/clang/lib/Sema/TreeTransform.h b/clang/lib/Sema/
      TemplateName Name = getDerived().RebuildTemplateName(
          SS, TL.getTemplateKeywordLoc(), DTN.getName(), TL.getTemplateNameLoc(),
          /*ObjectType=*/QualType(), /*FirstQualifierInScope=*/nullptr,
-diff -ruN --strip-trailing-cr a/clang/lib/Serialization/ASTReaderStmt.cpp b/clang/lib/Serialization/ASTReaderStmt.cpp
---- a/clang/lib/Serialization/ASTReaderStmt.cpp
-+++ b/clang/lib/Serialization/ASTReaderStmt.cpp
-@@ -2229,6 +2229,7 @@
-     E->PackIndex = Record.readInt();
-   else
-     E->PackIndex = 0;
-+  E->Final = CurrentUnpackingBits->getNextBit();
-   E->SubstNonTypeTemplateParmExprBits.NameLoc = readSourceLocation();
-   E->Replacement = Record.readSubExpr();
- }
-diff -ruN --strip-trailing-cr a/clang/lib/Serialization/ASTWriterStmt.cpp b/clang/lib/Serialization/ASTWriterStmt.cpp
---- a/clang/lib/Serialization/ASTWriterStmt.cpp
-+++ b/clang/lib/Serialization/ASTWriterStmt.cpp
-@@ -2229,6 +2229,7 @@
-   CurrentPackingBits.addBit((bool)E->getPackIndex());
-   if (auto PackIndex = E->getPackIndex())
-     Record.push_back(*PackIndex + 1);
-+  CurrentPackingBits.addBit(E->getFinal());
- 
-   Record.AddSourceLocation(E->getNameLoc());
-   Record.AddStmt(E->getReplacement());
 diff -ruN --strip-trailing-cr a/clang/test/CodeGen/include/cuda.h b/clang/test/CodeGen/include/cuda.h
 --- a/clang/test/CodeGen/include/cuda.h
 +++ b/clang/test/CodeGen/include/cuda.h
@@ -515,119 +481,6 @@ diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp
        E->Idx >= *GatheredLoadsEntriesFirst && !E->isGather() &&
        E->getOpcode() == Instruction::Load) {
      Res = FindFirstInst();
-diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp
---- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp
-+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp
-@@ -2590,6 +2590,14 @@
-     if (R.mayWriteToMemory() && !InterleaveR)
-       return;
- 
-+    // Do not narrow interleave groups if there are VectorPointer recipes and
-+    // the plan was unrolled. The recipe implicitly uses VF from
-+    // VPTransformState.
-+    // TODO: Remove restriction once the VF for the VectorPointer offset is
-+    // modeled explicitly as operand.
-+    if (isa<VPVectorPointerRecipe>(&R) && Plan.getUF() > 1)
-+      return;
-+
-     // All other ops are allowed, but we reject uses that cannot be converted
-     // when checking all allowed consumers (store interleave groups) below.
-     if (!InterleaveR)
-diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LoopVectorize/AArch64/transform-narrow-interleave-to-widen-memory-unroll.ll b/llvm/test/Transforms/LoopVectorize/AArch64/transform-narrow-interleave-to-widen-memory-unroll.ll
---- a/llvm/test/Transforms/LoopVectorize/AArch64/transform-narrow-interleave-to-widen-memory-unroll.ll
-+++ b/llvm/test/Transforms/LoopVectorize/AArch64/transform-narrow-interleave-to-widen-memory-unroll.ll
-@@ -66,3 +66,91 @@
- exit:
-   ret void
- }
-+
-+define void @test_2xi64_with_wide_load(ptr noalias %data, ptr noalias %factor) {
-+; CHECK-LABEL: define void @test_2xi64_with_wide_load(
-+; CHECK-SAME: ptr noalias [[DATA:%.*]], ptr noalias [[FACTOR:%.*]]) {
-+; CHECK-NEXT:  [[ENTRY:.*]]:
-+; CHECK-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]
-+; CHECK:       [[VECTOR_PH]]:
-+; CHECK-NEXT:    br label %[[VECTOR_BODY:.*]]
-+; CHECK:       [[VECTOR_BODY]]:
-+; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]
-+; CHECK-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 2
-+; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i64, ptr [[FACTOR]], i64 [[INDEX]]
-+; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i64, ptr [[TMP1]], i32 0
-+; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i64, ptr [[TMP1]], i32 2
-+; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = load <2 x i64>, ptr [[TMP2]], align 8
-+; CHECK-NEXT:    [[BROADCAST_SPLAT3:%.*]] = load <2 x i64>, ptr [[TMP3]], align 8
-+; CHECK-NEXT:    [[TMP6:%.*]] = shl nsw i64 [[INDEX]], 1
-+; CHECK-NEXT:    [[TMP7:%.*]] = shl nsw i64 [[TMP0]], 1
-+; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i64, ptr [[DATA]], i64 [[TMP6]]
-+; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i64, ptr [[DATA]], i64 [[TMP7]]
-+; CHECK-NEXT:    [[WIDE_VEC:%.*]] = load <4 x i64>, ptr [[TMP8]], align 8
-+; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = shufflevector <4 x i64> [[WIDE_VEC]], <4 x i64> poison, <2 x i32> <i32 0, i32 2>
-+; CHECK-NEXT:    [[STRIDED_VEC2:%.*]] = shufflevector <4 x i64> [[WIDE_VEC]], <4 x i64> poison, <2 x i32> <i32 1, i32 3>
-+; CHECK-NEXT:    [[WIDE_VEC3:%.*]] = load <4 x i64>, ptr [[TMP9]], align 8
-+; CHECK-NEXT:    [[WIDE_LOAD1:%.*]] = shufflevector <4 x i64> [[WIDE_VEC3]], <4 x i64> poison, <2 x i32> <i32 0, i32 2>
-+; CHECK-NEXT:    [[STRIDED_VEC5:%.*]] = shufflevector <4 x i64> [[WIDE_VEC3]], <4 x i64> poison, <2 x i32> <i32 1, i32 3>
-+; CHECK-NEXT:    [[TMP10:%.*]] = mul <2 x i64> [[BROADCAST_SPLAT]], [[WIDE_LOAD]]
-+; CHECK-NEXT:    [[TMP11:%.*]] = mul <2 x i64> [[BROADCAST_SPLAT3]], [[WIDE_LOAD1]]
-+; CHECK-NEXT:    [[TMP15:%.*]] = mul <2 x i64> [[BROADCAST_SPLAT]], [[STRIDED_VEC2]]
-+; CHECK-NEXT:    [[TMP16:%.*]] = mul <2 x i64> [[BROADCAST_SPLAT3]], [[STRIDED_VEC5]]
-+; CHECK-NEXT:    [[TMP17:%.*]] = shufflevector <2 x i64> [[TMP10]], <2 x i64> [[TMP15]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
-+; CHECK-NEXT:    [[INTERLEAVED_VEC:%.*]] = shufflevector <4 x i64> [[TMP17]], <4 x i64> poison, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
-+; CHECK-NEXT:    store <4 x i64> [[INTERLEAVED_VEC]], ptr [[TMP8]], align 8
-+; CHECK-NEXT:    [[TMP18:%.*]] = shufflevector <2 x i64> [[TMP11]], <2 x i64> [[TMP16]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
-+; CHECK-NEXT:    [[INTERLEAVED_VEC6:%.*]] = shufflevector <4 x i64> [[TMP18]], <4 x i64> poison, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
-+; CHECK-NEXT:    store <4 x i64> [[INTERLEAVED_VEC6]], ptr [[TMP9]], align 8
-+; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
-+; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], 100
-+; CHECK-NEXT:    br i1 [[TMP12]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
-+; CHECK:       [[MIDDLE_BLOCK]]:
-+; CHECK-NEXT:    br i1 true, label %[[EXIT:.*]], label %[[SCALAR_PH]]
-+; CHECK:       [[SCALAR_PH]]:
-+; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 100, %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]
-+; CHECK-NEXT:    br label %[[LOOP:.*]]
-+; CHECK:       [[LOOP]]:
-+; CHECK-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]
-+; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[FACTOR]], i64 [[IV]]
-+; CHECK-NEXT:    [[L_FACTOR:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
-+; CHECK-NEXT:    [[TMP13:%.*]] = shl nsw i64 [[IV]], 1
-+; CHECK-NEXT:    [[DATA_0:%.*]] = getelementptr inbounds i64, ptr [[DATA]], i64 [[TMP13]]
-+; CHECK-NEXT:    [[L_0:%.*]] = load i64, ptr [[DATA_0]], align 8
-+; CHECK-NEXT:    [[MUL_0:%.*]] = mul i64 [[L_FACTOR]], [[L_0]]
-+; CHECK-NEXT:    store i64 [[MUL_0]], ptr [[DATA_0]], align 8
-+; CHECK-NEXT:    [[TMP14:%.*]] = or disjoint i64 [[TMP13]], 1
-+; CHECK-NEXT:    [[DATA_1:%.*]] = getelementptr inbounds i64, ptr [[DATA]], i64 [[TMP14]]
-+; CHECK-NEXT:    [[L_1:%.*]] = load i64, ptr [[DATA_1]], align 8
-+; CHECK-NEXT:    [[MUL_1:%.*]] = mul i64 [[L_FACTOR]], [[L_1]]
-+; CHECK-NEXT:    store i64 [[MUL_1]], ptr [[DATA_1]], align 8
-+; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV]], 1
-+; CHECK-NEXT:    [[EC:%.*]] = icmp eq i64 [[IV_NEXT]], 100
-+; CHECK-NEXT:    br i1 [[EC]], label %[[EXIT]], label %[[LOOP]], !llvm.loop [[LOOP5:![0-9]+]]
-+; CHECK:       [[EXIT]]:
-+; CHECK-NEXT:    ret void
-+;
-+entry:
-+  br label %loop
-+
-+loop:
-+  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
-+  %arrayidx = getelementptr inbounds i64, ptr %factor, i64 %iv
-+  %l.factor = load i64, ptr %arrayidx, align 8
-+  %1 = shl nsw i64 %iv, 1
-+  %data.0 = getelementptr inbounds i64, ptr %data, i64 %1
-+  %l.0 = load i64, ptr %data.0, align 8
-+  %mul.0 = mul i64 %l.factor, %l.0
-+  store i64 %mul.0, ptr %data.0, align 8
-+  %3 = or disjoint i64 %1, 1
-+  %data.1 = getelementptr inbounds i64, ptr %data, i64 %3
-+  %l.1 = load i64, ptr %data.1, align 8
-+  %mul.1 = mul i64 %l.factor, %l.1
-+  store i64 %mul.1, ptr %data.1, align 8
-+  %iv.next = add nuw nsw i64 %iv, 1
-+  %ec = icmp eq i64 %iv.next, 100
-+  br i1 %ec, label %exit, label %loop
-+
-+exit:
-+  ret void
-+}
 diff -ruN --strip-trailing-cr a/llvm/test/Transforms/SLPVectorizer/X86/split-node-last-inst-vectorized.ll b/llvm/test/Transforms/SLPVectorizer/X86/split-node-last-inst-vectorized.ll
 --- a/llvm/test/Transforms/SLPVectorizer/X86/split-node-last-inst-vectorized.ll
 +++ b/llvm/test/Transforms/SLPVectorizer/X86/split-node-last-inst-vectorized.ll
@@ -731,18 +584,3 @@ diff -ruN --strip-trailing-cr a/llvm/test/Transforms/SLPVectorizer/X86/split-nod
 +  store i8 %58, ptr %59, align 1
 +  ret void
 +}
-diff -ruN --strip-trailing-cr a/llvm/unittests/CodeGen/X86MCInstLowerTest.cpp b/llvm/unittests/CodeGen/X86MCInstLowerTest.cpp
---- a/llvm/unittests/CodeGen/X86MCInstLowerTest.cpp
-+++ b/llvm/unittests/CodeGen/X86MCInstLowerTest.cpp
-@@ -151,9 +151,10 @@
-   MachineModuleInfoWrapperPass *MMIWP =
-       new MachineModuleInfoWrapperPass(TM.get(), &*MCFoo);
- 
--  legacy::PassManager PassMgrF;
-   SmallString<1024> Buf;
-   llvm::raw_svector_ostream OS(Buf);
-+  legacy::PassManager PassMgrF;
-+
-   AsmPrinter *Printer =
-       addPassesToEmitFile(PassMgrF, OS, CodeGenFileType::AssemblyFile, MMIWP);
-   PassMgrF.run(*M);
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index c3bcd53..73450ce 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "cd54cb062bba9c90a8f3723bf66caa7effbcf259"
-    LLVM_SHA256 = "4054d0f174e80e9d0ca62af465a60252faabe4c7163612c0fdcb86898f7f266a"
+    LLVM_COMMIT = "f280d60c9839120618da353ab71004be33c4fa53"
+    LLVM_SHA256 = "4bd04ea868766d48d3aabd666de4c38458ef0c6e074740fc1a82d4ec81efb16d"
 
     tf_http_archive(
         name = name,
