diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 509398d..2e6ff58 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1 +1,23 @@
 Auto generated patch. Do not edit or delete it, even if empty.
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaCXXScopeSpec.cpp b/clang/lib/Sema/SemaCXXScopeSpec.cpp
+--- a/clang/lib/Sema/SemaCXXScopeSpec.cpp
++++ b/clang/lib/Sema/SemaCXXScopeSpec.cpp
+@@ -873,6 +873,7 @@
+     DependentTemplateSpecializationTypeLoc SpecTL
+       = Builder.push<DependentTemplateSpecializationTypeLoc>(T);
+     SpecTL.setElaboratedKeywordLoc(SourceLocation());
++    SpecTL.setQualifierLoc(NestedNameSpecifierLoc());
+     SpecTL.setTemplateKeywordLoc(TemplateKWLoc);
+     SpecTL.setTemplateNameLoc(TemplateNameLoc);
+     SpecTL.setLAngleLoc(LAngleLoc);
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/libc/BUILD.bazel b/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
+@@ -1902,7 +1902,6 @@
+     name = "inv_trigf_utils",
+     srcs = ["src/math/generic/inv_trigf_utils.cpp"],
+     hdrs = [
+-        "src/math/generic/atan_utils.h",
+         "src/math/generic/inv_trigf_utils.h",
+     ],
+     deps = [
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index fd9baec..91166c3 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "799e9053641a6478d3144866a97737b37b87c260"
-    LLVM_SHA256 = "be33f1f9f20da6bd744d62356bf469e906e3b5f5e9cba2af6ee6418cee49f1f3"
+    LLVM_COMMIT = "537b6541e8067d7ef7aa38791989fca6303b7fdf"
+    LLVM_SHA256 = "6dca45b9afe4f530a29f7cfd21b183f6ee51c61b0a4dede2f1173049615cab5f"
 
     tf_http_archive(
         name = name,
diff --git a/third_party/stablehlo/temporary.patch b/third_party/stablehlo/temporary.patch
index 8b13789..90ca4ec 100755
--- a/third_party/stablehlo/temporary.patch
+++ b/third_party/stablehlo/temporary.patch
@@ -1 +1,49 @@
+diff --ruN a/stablehlo/stablehlo/testdata/fft_complex128_14_15_0_17.mlir b/stablehlo/stablehlo/testdata/fft_complex128_14_15_0_17.mlir
+--- stablehlo/stablehlo/testdata/fft_complex128_14_15_0_17.mlir
++++ stablehlo/stablehlo/testdata/fft_complex128_14_15_0_17.mlir
+@@ -12,7 +12,7 @@
+     return %2 : tensor<14x15x0x33xf64>
+   }
+   func.func private @inputs() -> (tensor<14x15x0x17xcomplex<f64>> {mhlo.layout_mode = "default"}) {
+-    %cst = stablehlo.constant dense<> : tensor<14x15x0x17xcomplex<f64>>
++    %cst = stablehlo.constant dense<(0.0, 0.0)> : tensor<14x15x0x17xcomplex<f64>>
+     return %cst : tensor<14x15x0x17xcomplex<f64>>
+   }
+   func.func private @expected() -> (tensor<14x15x0x33xf64> {mhlo.layout_mode = "default"}) {
+diff --ruN a/stablehlo/stablehlo/testdata/fft_complex64_14_15_0_17.mlir b/stablehlo/stablehlo/testdata/fft_complex64_14_15_0_17.mlir
+--- stablehlo/stablehlo/testdata/fft_complex64_14_15_0_17.mlir
++++ stablehlo/stablehlo/testdata/fft_complex64_14_15_0_17.mlir
+@@ -12,7 +12,7 @@
+     return %2 : tensor<14x15x0x33xf32>
+   }
+   func.func private @inputs() -> (tensor<14x15x0x17xcomplex<f32>> {mhlo.layout_mode = "default"}) {
+-    %cst = stablehlo.constant dense<> : tensor<14x15x0x17xcomplex<f32>>
++    %cst = stablehlo.constant dense<(0.0, 0.0)> : tensor<14x15x0x17xcomplex<f32>>
+     return %cst : tensor<14x15x0x17xcomplex<f32>>
+   }
+   func.func private @expected() -> (tensor<14x15x0x33xf32> {mhlo.layout_mode = "default"}) {
+diff --ruN a/stablehlo/stablehlo/testdata/fft_float32_14_15_0_17.mlir b/stablehlo/stablehlo/testdata/fft_float32_14_15_0_17.mlir
+--- stablehlo/stablehlo/testdata/fft_float32_14_15_0_17.mlir
++++ stablehlo/stablehlo/testdata/fft_float32_14_15_0_17.mlir
+@@ -16,7 +16,7 @@
+     return %cst : tensor<14x15x0x17xf32>
+   }
+   func.func private @expected() -> (tensor<14x15x0x9xcomplex<f32>> {mhlo.layout_mode = "default"}) {
+-    %cst = stablehlo.constant dense<> : tensor<14x15x0x9xcomplex<f32>>
++    %cst = stablehlo.constant dense<(0.0, 0.0)> : tensor<14x15x0x9xcomplex<f32>>
+     return %cst : tensor<14x15x0x9xcomplex<f32>>
+   }
+ }
+diff --ruN a/stablehlo/stablehlo/testdata/fft_float64_14_15_0_17.mlir b/stablehlo/stablehlo/testdata/fft_float64_14_15_0_17.mlir
+--- stablehlo/stablehlo/testdata/fft_float64_14_15_0_17.mlir
++++ stablehlo/stablehlo/testdata/fft_float64_14_15_0_17.mlir
+@@ -16,7 +16,7 @@
+     return %cst : tensor<14x15x0x17xf64>
+   }
+   func.func private @expected() -> (tensor<14x15x0x9xcomplex<f64>> {mhlo.layout_mode = "default"}) {
+-    %cst = stablehlo.constant dense<> : tensor<14x15x0x9xcomplex<f64>>
++    %cst = stablehlo.constant dense<(0.0, 0.0)> : tensor<14x15x0x9xcomplex<f64>>
+     return %cst : tensor<14x15x0x9xcomplex<f64>>
+   }
+ }
 
