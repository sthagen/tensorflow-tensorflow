diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.cpp b/stablehlo/stablehlo/dialect/StablehloOps.cpp
--- stablehlo/stablehlo/dialect/StablehloOps.cpp
+++ stablehlo/stablehlo/dialect/StablehloOps.cpp
@@ -511,12 +511,10 @@
 void CustomCallOp::getEffects(
     SmallVectorImpl<SideEffects::EffectInstance<MemoryEffects::Effect>>&
         effects) {
-  // Note: `has_side_effect` "defaults" to `false` but isn't required to exist.
-  // This semantic contradiction means, in practical terms, that the attribute
-  // won't exist by default but should be *treated* as `false` if missing.
-  // `getHasSideEffect()` abstracts this nuance away and returns `false` by
-  // default, whereas `getHasSideEffectAttr()` may return a null attribute.
-  if (!getHasSideEffect()) return;
+  // CustomCall has "all possible effects" unless the has_side_effect is present
+  // and set to false.
+  auto hasSideEffect = getHasSideEffectAttr();
+  if (hasSideEffect && !hasSideEffect.getValue()) return;
   effects.emplace_back(MemoryEffects::Allocate::get());
   effects.emplace_back(MemoryEffects::Free::get());
   effects.emplace_back(MemoryEffects::Write::get());
diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.h b/stablehlo/stablehlo/dialect/StablehloOps.h
--- stablehlo/stablehlo/dialect/StablehloOps.h
+++ stablehlo/stablehlo/dialect/StablehloOps.h
@@ -24,6 +24,7 @@
 #include "mlir/Dialect/Quant/IR/QuantTypes.h"
 #include "mlir/Dialect/Shape/IR/Shape.h"
 #include "mlir/IR/Attributes.h"
+#include "mlir/IR/Block.h"
 #include "mlir/IR/Builders.h"
 #include "mlir/IR/BuiltinAttributes.h"
 #include "mlir/IR/BuiltinTypes.h"
@@ -33,6 +34,7 @@
 #include "mlir/IR/MLIRContext.h"
 #include "mlir/IR/OpDefinition.h"
 #include "mlir/IR/Operation.h"
+#include "mlir/IR/Region.h"
 #include "mlir/IR/TensorEncoding.h"
 #include "mlir/IR/TypeUtilities.h"
 #include "mlir/IR/Types.h"
@@ -174,6 +176,21 @@
                     const llvm::ArrayRef<Type> &elementTypes, int64_t dimension,
                     bool isStable, ComparisonDirection direction);
 
+template <typename OpTy>
+void buildReduceBody(Type elementType, Region &body, OpBuilder &builder) {
+  OpBuilder::InsertionGuard guard(builder);
+  Block *block = builder.createBlock(&body);
+
+  // Block arguments are scalars of the given element type.
+  Type type = RankedTensorType::get(/*shape=*/{}, elementType);
+  Location loc = body.getLoc();
+  block->addArguments({type, type}, {loc, loc});
+
+  auto reducer =
+      builder.create<OpTy>(loc, block->getArgument(0), block->getArgument(1));
+  builder.create<stablehlo::ReturnOp>(loc, reducer.getResult());
+}
+
 }  // end namespace stablehlo
 }  // end namespace mlir
 
diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.td b/stablehlo/stablehlo/dialect/StablehloOps.td
--- stablehlo/stablehlo/dialect/StablehloOps.td
+++ stablehlo/stablehlo/dialect/StablehloOps.td
@@ -1161,7 +1161,8 @@
 //===----------------------------------------------------------------------===//
 
 def StableHLO_InfeedOp : StableHLO_Op<"infeed", [
-      MemoryEffects<[MemRead<StableHLO_InfeedResource>]>,
+      MemoryEffects<[MemRead<StableHLO_InfeedResource>,
+                     MemWrite<StableHLO_InfeedResource>]>,
     ]> {
   let summary = "Infeed operation";
   let description = [{
@@ -1188,7 +1189,8 @@
 
 def StableHLO_OutfeedOp : StableHLO_Op<"outfeed", [
       DeclareOpInterfaceMethods<InferTypeOpInterface>,
-      MemoryEffects<[MemWrite<StableHLO_OutfeedResource>]>,
+      MemoryEffects<[MemRead<StableHLO_OutfeedResource>,
+                     MemWrite<StableHLO_OutfeedResource>]>,
     ]> {
   let summary = "Outfeed operation";
   let description = [{
@@ -1214,7 +1216,8 @@
 
 def StableHLO_SendOp : StableHLO_Op<"send", [
       DeclareOpInterfaceMethods<InferTypeOpInterface>,
-      MemoryEffects<[MemWrite<StableHLO_SendResource>]>,
+      MemoryEffects<[MemRead<StableHLO_SendResource>,
+                     MemWrite<StableHLO_SendResource>]>,
     ]> {
   let summary = "Send operation";
   let description = [{
@@ -1243,7 +1246,8 @@
 }
 
 def StableHLO_RecvOp : StableHLO_Op<"recv", [
-      MemoryEffects<[MemRead<StableHLO_RecvResource>]>
+      MemoryEffects<[MemRead<StableHLO_RecvResource>,
+                     MemWrite<StableHLO_RecvResource>]>,
     ]> {
   let summary = "Recv operation";
   let description = [{
diff --ruN a/stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir b/stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir
--- stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir
+++ stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir
@@ -9,7 +9,7 @@
   %3 = builtin.unrealized_conversion_cast %2 : memref<i16> to memref<ui16>
   %4 = bufferization.to_tensor %3 : memref<ui16> to tensor<ui16>
   %5 = builtin.unrealized_conversion_cast %4 : tensor<ui16> to tensor<i16>
-  %6 = bufferization.to_memref %5 : tensor<i16> to memref<i16>
+  %6 = bufferization.to_buffer %5 : tensor<i16> to memref<i16>
   %7 = builtin.unrealized_conversion_cast %6 : memref<i16> to memref<ui16>
   func.return %7 : memref<ui16>
 }

