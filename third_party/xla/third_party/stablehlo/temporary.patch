diff --ruN a/stablehlo/stablehlo/conversions/tosa/tests/unary.mlir b/stablehlo/stablehlo/conversions/tosa/tests/unary.mlir
--- stablehlo/stablehlo/conversions/tosa/tests/unary.mlir
+++ stablehlo/stablehlo/conversions/tosa/tests/unary.mlir
@@ -79,7 +79,9 @@
 
 // CHECK-LABEL: @slice
 func.func @slice(%arg : tensor<4x3xf32>) -> tensor<2x2xf32> {
-  // CHECK: tosa.slice %arg0 {size = array<i64: 2, 2>, start = array<i64: 2, 1>}
+  // CHECK: %[[SIZE:.*]] = tosa.const_shape {value = dense<[2, 1]> : tensor<2xindex>} : () -> !tosa.shape<2>
+  // CHECK: %[[START:.*]] = tosa.const_shape {value = dense<2> : tensor<2xindex>} : () -> !tosa.shape<2>
+  // CHECK: tosa.slice %arg0, %[[SIZE]], %[[START]]
   %0 = "stablehlo.slice"(%arg) {
     start_indices = array<i64: 2, 1>,
     limit_indices = array<i64: 4, 3>,
diff --ruN a/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.cpp b/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.cpp
--- stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.cpp
+++ stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.cpp
@@ -23,6 +23,7 @@
 #include "mlir/Dialect/PDL/IR/PDL.h"
 #include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
 #include "mlir/Dialect/Tosa/IR/TosaOps.h"
+#include "mlir/Dialect/Tosa/Utils/ConversionUtils.h"
 #include "mlir/IR/Attributes.h"
 #include "mlir/IR/Block.h"
 #include "mlir/IR/BuiltinAttributes.h"
@@ -435,8 +436,8 @@
 
     rewriter.replaceOpWithNewOp<tosa::SliceOp>(
         op, op.getType(), op.getOperand(),
-        rewriter.getDenseI64ArrayAttr(startIndicesI64),
-        rewriter.getDenseI64ArrayAttr(size));
+        getTosaConstShape(rewriter, op.getLoc(), startIndicesI64),
+        getTosaConstShape(rewriter, op.getLoc(), size));
     return success();
   }
 };
diff --ruN a/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll b/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
--- stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
+++ stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
@@ -16,6 +16,32 @@
 #include "stablehlo/dialect/StablehloOps.td"
 
 // Helper functions.
+Rewrite changeElementTypeToI1(type: Type) -> Type [{
+  auto tensorType = llvm::cast<mlir::RankedTensorType>(type);
+  return RankedTensorType::get(tensorType.getShape(), rewriter.getI1Type());
+}];
+
+Rewrite changeElementTypeToI8(type: Type) -> Type [{
+  auto tensorType = llvm::cast<mlir::RankedTensorType>(type);
+  return RankedTensorType::get(tensorType.getShape(), rewriter.getI8Type());
+}];
+
+Rewrite zerosLike(op: Op, type: Type) -> Op [{
+  auto elementType = llvm::cast<mlir::TensorType>(type).getElementType();
+  llvm::SmallVector<mlir::Attribute, 4> outputValue;
+
+  if (elementType.isF16() || elementType.isF32() || elementType.isBF16()) {
+    outputValue.push_back(rewriter.getFloatAttr(elementType, 0));
+  } else {
+    outputValue.push_back(rewriter.getIntegerAttr(elementType, 0));
+  }
+
+  return rewriter.create<mlir::tosa::ConstOp>(
+      op->getLoc(), type,
+      mlir::DenseElementsAttr::get(
+        llvm::cast<mlir::ShapedType>(type), outputValue));
+}];
+
 Rewrite onesLike(op: Op, type: Type) -> Op [{
   auto elementType = llvm::cast<mlir::TensorType>(type).getElementType();
   llvm::SmallVector<mlir::Attribute, 4> outputValue;
@@ -45,11 +71,6 @@
       op->getLoc(), type,
       mlir::DenseElementsAttr::get(
         llvm::cast<mlir::ShapedType>(type), outputValue));
-}];
-
-Rewrite changeElementTypeToI1(type: Type) -> Type [{
-  auto tensorType = llvm::cast<mlir::RankedTensorType>(type);
-  return RankedTensorType::get(tensorType.getShape(), rewriter.getI1Type());
 }];
 
 // Nullary ops.
@@ -134,10 +155,16 @@
   replace op<stablehlo.minimum>(input0 : Value<_: Tosa_Tensor>,
                            input1 : Value<_: Tosa_Tensor>)
      with op<tosa.minimum>(input0, input1);
-Pattern =>
-  replace op<stablehlo.multiply>(input0 : Value<_: Tosa_Tensor>,
-                            input1 : Value<_: Tosa_Tensor>)
-     with op<tosa.mul>(input0, input1) {shift = attr<"0 : i8">};
+Pattern {
+  let root = op<stablehlo.multiply>(input0 : Value<inputType: Tosa_Tensor>,
+                            input1 : Value<_: Tosa_Tensor>);
+  rewrite root with {
+    let typei8 = changeElementTypeToI8(inputType);
+    let zeros = zerosLike(root, typei8);
+    let mulResult = op<tosa.mul>(input0, input1, zeros) -> (inputType);
+    replace root with mulResult;
+  };
+}
 Pattern =>
   replace op<stablehlo.or>(input0 : Value<_: Tosa_Tensor>,
                       input1 : Value<_: Tosa_Tensor>)

