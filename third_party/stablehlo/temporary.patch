diff --ruN a/stablehlo/stablehlo/tests/transforms/stablehlo_aggressive_simplification.mlir b/stablehlo/stablehlo/tests/transforms/stablehlo_aggressive_simplification.mlir
--- stablehlo/stablehlo/tests/transforms/stablehlo_aggressive_simplification.mlir
+++ stablehlo/stablehlo/tests/transforms/stablehlo_aggressive_simplification.mlir
@@ -1793,7 +1793,7 @@
 // -----
 
 ////////
-// WhileOp DCE
+// WhileOp
 
 // CHECK-LABEL: while_op_with_outfeed_no_dce
 func.func @while_op_with_outfeed_no_dce(%arg0: tensor<i64>) -> tensor<i64> {
@@ -1822,6 +1822,31 @@
     stablehlo.return %iterArg : tensor<i64>
   }
   return %arg0 : tensor<i64>
+}
+
+// Constant capture
+// CHECK-LABEL: while_op_constant_capture
+func.func @while_op_constant_capture(%arg0: tensor<10xf32>) -> (tensor<10xf32>) {
+  %c = stablehlo.constant dense<1> : tensor<i32>
+  %c_0 = stablehlo.constant dense<10> : tensor<i32>
+  %c_1 = stablehlo.constant dense<0> : tensor<i32>
+  %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
+  %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<10xf32>
+  // CHECK: stablehlo.while(%iterArg = %c_1, %iterArg_2 = %0) : tensor<i32>, tensor<10xf32> attributes {mhlo.frontend_attributes = {test_attr = "true"}}
+  %1:3 = stablehlo.while(%iterArg = %arg0, %iterArg_2 = %c_1, %iterArg_3 = %0) : tensor<10xf32>, tensor<i32>, tensor<10xf32> attributes {mhlo.frontend_attributes = {test_attr = "true"}}
+    cond {
+    %2 = stablehlo.compare  LT, %iterArg_2, %c_0,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
+    stablehlo.return %2 : tensor<i1>
+  } do {
+    %2 = stablehlo.dynamic_slice %iterArg, %iterArg_2, sizes = [1] : (tensor<10xf32>, tensor<i32>) -> tensor<1xf32>
+    %3 = stablehlo.reshape %2 : (tensor<1xf32>) -> tensor<f32>
+    %4 = stablehlo.sine %3 : tensor<f32>
+    %5 = stablehlo.broadcast_in_dim %4, dims = [] : (tensor<f32>) -> tensor<1xf32>
+    %6 = stablehlo.dynamic_update_slice %iterArg_3, %5, %iterArg_2 : (tensor<10xf32>, tensor<1xf32>, tensor<i32>) -> tensor<10xf32>
+    %7 = stablehlo.add %iterArg_2, %c : tensor<i32>
+    stablehlo.return %iterArg, %7, %6 : tensor<10xf32>, tensor<i32>, tensor<10xf32>
+  }
+  return %1#2 : tensor<10xf32>
 }
 
 // -----
diff --ruN a/stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp b/stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp
--- stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp
+++ stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp
@@ -1367,7 +1367,8 @@
       bodyReturnOp->eraseOperand(idx);
 
     WhileOp newWhileOp = rewriter.create<WhileOp>(
-        whileOp.getLoc(), bodyReturnOp->getOperandTypes(), newOperands);
+        whileOp.getLoc(), bodyReturnOp->getOperandTypes(), newOperands,
+        whileOp->getAttrs());
     newWhileOp.getBodyRegion(0).takeBody(whileOp.getBodyRegion(0));
     newWhileOp.getBodyRegion(1).takeBody(whileOp.getBodyRegion(1));
     for (auto results : llvm::zip(resultsToReplace, newWhileOp->getResults()))

