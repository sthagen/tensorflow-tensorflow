diff --ruN a/stablehlo/docs/interpreter_status.md b/stablehlo/docs/interpreter_status.md
--- stablehlo/docs/interpreter_status.md
+++ stablehlo/docs/interpreter_status.md
@@ -237,15 +237,6 @@
 ### Convert Not In HLO Ops
 
 ```sh
-# broadcast
-mlir-hlo-opt -mhlo-legalize-broadcast-to-broadcast-in-dim <path/to/input>
-
-# create_token
-mlir-hlo-opt -mhlo-legalize-create-token-to-after-all <path/to/input>
-
-# cross-replica-sum
-mlir-hlo-opt -mhlo-legalize-cross-replica-sum-to-all-reduce <path/to/input>
-
 # dot
 mlir-hlo-opt -mhlo-legalize-dot-to-dot-general <path/to/input>
 
diff --ruN a/stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir b/stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir
--- stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir
+++ stablehlo/stablehlo/tests/transforms/stablehlo_convert_to_signless.mlir
@@ -7,9 +7,9 @@
   %1 = builtin.unrealized_conversion_cast %arg0 : memref<*xui16> to memref<*xi16>
   %2 = memref.cast %1 : memref<*xi16> to memref<i16>
   %3 = builtin.unrealized_conversion_cast %2 : memref<i16> to memref<ui16>
-  %4 = bufferization.to_tensor %3 : memref<ui16>
+  %4 = bufferization.to_tensor %3 : memref<ui16> to tensor<ui16>
   %5 = builtin.unrealized_conversion_cast %4 : tensor<ui16> to tensor<i16>
-  %6 = bufferization.to_memref %5 : memref<i16>
+  %6 = bufferization.to_memref %5 : tensor<i16> to memref<i16>
   %7 = builtin.unrealized_conversion_cast %6 : memref<i16> to memref<ui16>
   func.return %7 : memref<ui16>
 }
diff --ruN a/stablehlo/stablehlo/transforms/StablehloAggressiveFolder.cpp b/stablehlo/stablehlo/transforms/StablehloAggressiveFolder.cpp
--- stablehlo/stablehlo/transforms/StablehloAggressiveFolder.cpp
+++ stablehlo/stablehlo/transforms/StablehloAggressiveFolder.cpp
@@ -79,8 +79,9 @@
   } else {
     llvm::report_fatal_error("expected integer type");
   }
-  return APSInt({/*numBits=*/numBits, value},
-                /*isUnsigned=*/isUnsigned);
+  return APSInt(
+      {/*numBits=*/numBits, value, /*isSigned=*/false, /*implicitTrunc=*/true},
+      /*isUnsigned=*/isUnsigned);
 }
 
 LogicalResult validateResultTypeForEval(PatternRewriter& rewriter,

