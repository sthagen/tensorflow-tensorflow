diff --ruN a/stablehlo/stablehlo/conversions/linalg/transforms/TypeConversion.cpp b/stablehlo/stablehlo/conversions/linalg/transforms/TypeConversion.cpp
--- stablehlo/stablehlo/conversions/linalg/transforms/TypeConversion.cpp
+++ stablehlo/stablehlo/conversions/linalg/transforms/TypeConversion.cpp
@@ -66,17 +66,25 @@
       ->getResult(0);
 }
 
-std::optional<Value> scalarToTensor(OpBuilder &builder, Type /*type*/,
+std::optional<Value> scalarToTensor(OpBuilder& builder, Type type,
                                     ValueRange inputs, Location loc) {
   assert(inputs.size() == 1);
-  if (llvm::isa<ShapedType>(inputs.front().getType())) {
+  if (mlir::isa<ShapedType>(inputs.front().getType())) {
     return std::nullopt;
   }
-  return builder
-      .create<tensor::FromElementsOp>(
-          loc, RankedTensorType::get({}, inputs.front().getType()),
-          inputs.front())
-      .getResult();
+  Value result =
+      builder
+          .create<tensor::FromElementsOp>(
+              loc, RankedTensorType::get({}, inputs.front().getType()),
+              inputs.front())
+          .getResult();
+  // Convert to a signed integer if necessary.
+  Type elementType = mlir::getElementTypeOrSelf(type);
+  if (elementType.isInteger() && !elementType.isSignlessInteger()) {
+    result = builder.create<UnrealizedConversionCastOp>(loc, type, result)
+                 ->getResult(0);
+  }
+  return result;
 }
 
 }  // namespace
diff --ruN a/stablehlo/stablehlo/transforms/StablehloLegalizeQuantToInt.cpp b/stablehlo/stablehlo/transforms/StablehloLegalizeQuantToInt.cpp
--- stablehlo/stablehlo/transforms/StablehloLegalizeQuantToInt.cpp
+++ stablehlo/stablehlo/transforms/StablehloLegalizeQuantToInt.cpp
@@ -1270,12 +1270,13 @@
     OperationState state(op->getLoc(), op->getName().getStringRef(), operands,
                          newResultTypes, op->getAttrs(), op->getSuccessors());
     for (Region &region : op->getRegions()) {
-      Region &newRegion = *state.addRegion();
-      rewriter.inlineRegionBefore(region, newRegion, newRegion.begin());
-      if (failed(
-              rewriter.convertRegionTypes(&newRegion, *getTypeConverter()))) {
+      auto newRegion = std::make_unique<Region>(op);
+      rewriter.inlineRegionBefore(region, *newRegion, newRegion->begin());
+      if (failed(rewriter.convertRegionTypes(newRegion.get(),
+                                             *getTypeConverter()))) {
         return failure();
       }
+      state.addRegion(std::move(newRegion));
     }
     Operation *newOp = rewriter.create(state);
     rewriter.replaceOp(op, newOp);

